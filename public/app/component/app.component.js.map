{"version":3,"sources":["../src/ts/app/component/app.component.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,qBAKO,eAAe,CAAC,CAAA;AACvB,QAAO,cAAc,CAAC,CAAA;AAEtB,uBAAyC,iBAAiB,CAAC,CAAA;AAG3D,6BAA4B,yBAAyB,CAAC,CAAA;AAOtD;IAeI,sBACY,SAAmB,EACnB,MAAc,EACd,WAAwB;QAFxB,cAAS,GAAT,SAAS,CAAU;QACnB,WAAM,GAAN,MAAM,CAAQ;QACd,gBAAW,GAAX,WAAW,CAAa;QAhBpC,WAAM,GAAG,QAAQ,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC;QAC/C,aAAQ,GAAY,KAAK,CAAC;QAC1B,mBAAc,GAAY,KAAK,CAAC;QAMhC,eAAU,GAAY,KAAK,CAAC;QAC5B,gBAAW,GAAW,SAAS,CAAC;QAChC,kBAAa,GAAW,6CAA6C,CAAC;QACtE,kBAAa,GAAW,QAAQ,CAAC;QAO7B;;;;;;;;UAQE;IACN,CAAC;IAED,+BAAQ,GAAR;QACI,IAAI,CAAC,UAAU,EAAE,CAAC;QAElB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,WAAW,CAAC,eAAe,EAAE,CAAC;IACnD,CAAC;IAED,iCAAU,GAAV;QACI,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,GAAG,OAAO,CAAC;IACxC,CAAC;IAED,iCAAU,GAAV;QACI,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,GAAG,MAAM,CAAC;IACvC,CAAC;IAED,gCAAS,GAAT;QACI,IAAI,CAAC,QAAQ,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC;IACnC,CAAC;IAED,oCAAa,GAAb;QACI,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC;QACxB,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;IAC1B,CAAC;IAED,iCAAU,GAAV;QACI,sBAAsB;QACtB,EAAE,CAAC,CAAC,QAAQ,CAAC,iBAAiB;YAC1B,QAAQ,CAAC,uBAAuB,CAAC,CAAC,CAAC;YAEnC,mBAAmB;YACnB,EAAE,CAAC,CAAC,QAAQ,CAAC,cAAc,CAAC,CAAC,CAAC;gBAC1B,QAAQ,CAAC,cAAc,EAAE,CAAC;YAC9B,CAAC;YAAC,IAAI,CAAC,EAAE,CAAC,CAAC,QAAQ,CAAC,oBAAoB,CAAC,CAAC,CAAC;gBACvC,QAAQ,CAAC,oBAAoB,EAAE,CAAC;YACpC,CAAC;YAED,IAAI,CAAC,cAAc,GAAG,KAAK,CAAC;QAChC,CAAC;QAAC,IAAI,CAAC,CAAC;YACJ,IAAI,CAAC,GAAG,QAAQ,CAAC,IAAI,CAAC;YACtB,iBAAiB;YACjB,EAAE,CAAC,CAAC,CAAC,CAAC,iBAAiB,CAAC,CAAC,CAAC;gBACtB,CAAC,CAAC,iBAAiB,EAAE,CAAC;YAC1B,CAAC;YAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,uBAAuB,CAAC,CAAC,CAAC;gBACnC,CAAC,CAAC,uBAAuB,EAAE,CAAC;YAChC,CAAC;YAED,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC;QAC/B,CAAC;IACL,CAAC;IAED,+BAAQ,GAAR,UAAS,QAAa;QAClB,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;IAC1B,CAAC;IAvFL;QAAC,gBAAS,CAAC;YACP,QAAQ,EAAE,MAAM,CAAC,EAAE;YACnB,QAAQ,EAAE,QAAQ;YAClB,WAAW,EAAE,gCAAgC;SAChD,CAAC;;oBAAA;IAoFF,mBAAC;AAAD,CAnFA,AAmFC,IAAA;AAnFY,oBAAY,eAmFxB,CAAA","file":"app.component.js","sourcesContent":["import {\r\n    Component,\r\n    OnInit,\r\n    Renderer,\r\n    Injectable\r\n} from '@angular/core';\r\nimport 'rxjs/Subject';\r\nimport { Subject } from 'rxjs/Subject';\r\nimport { Router, RoutesRecognized } from '@angular/router';\r\n\r\nimport { User } from \"../model/user\";\r\nimport { UserService } from '../service/user.service';\r\n\r\n@Component({\r\n    moduleId: module.id,\r\n    selector: 'my-app',\r\n    templateUrl: '../template/app.component.html'\r\n})\r\nexport class AppComponent implements OnInit {\r\n\r\n    loader = document.getElementById(\"siteLoader\");\r\n    showMenu: boolean = false;\r\n    showFullscreen: boolean = false;\r\n\r\n    isLoggedIn: boolean;\r\n\r\n    user: User;\r\n\r\n    showDialog: boolean = false;\r\n    dialogTitle: string = \"Delete?\";\r\n    dialogMessage: string = \"Are you sure you want to delete this thing?\";\r\n    dialogConfirm: string = \"DELETE\";\r\n\r\n    constructor(\r\n        private _renderer: Renderer,\r\n        private router: Router,\r\n        private userService: UserService\r\n    ) {\r\n        /* I won't use this, but here is how to subscribe to router events!\r\n        // when changing route, reset the toolbar\r\n        router.events.subscribe(val => {\r\n            if (val instanceof RoutesRecognized) {\r\n                this.setTitle(\"\");\r\n                this.setTools([]);\r\n            }\r\n        })\r\n        */\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.hideLoader();\r\n\r\n        this.user = this.userService.getLoggedInUser();\r\n    }\r\n\r\n    showLoader(): void {\r\n        this.loader.style.display = \"block\";\r\n    }\r\n\r\n    hideLoader(): void {\r\n        this.loader.style.display = \"none\";\r\n    }\r\n\r\n    toggleNav(): void {\r\n        this.showMenu = !this.showMenu;\r\n    }\r\n\r\n    closeOverlays(): void {\r\n        this.showDialog = false;\r\n        this.showMenu = false;\r\n    }\r\n\r\n    fullscreen(): void {\r\n        // are we full-screen?\r\n        if (document.fullscreenElement ||\r\n            document.webkitFullscreenElement) {\r\n            \r\n            // exit full-screen\r\n            if (document.exitFullscreen) {\r\n                document.exitFullscreen();\r\n            } else if (document.webkitExitFullscreen) {\r\n                document.webkitExitFullscreen();\r\n            }\r\n\r\n            this.showFullscreen = false;\r\n        } else {\r\n            var i = document.body;\r\n            // go full-screen\r\n            if (i.requestFullscreen) {\r\n                i.requestFullscreen();\r\n            } else if (i.webkitRequestFullscreen) {\r\n                i.webkitRequestFullscreen();\r\n            }\r\n\r\n            this.showFullscreen = true;\r\n        }\r\n    }\r\n\r\n    onScroll(distance: any): void {\r\n        console.log(distance);\r\n    }\r\n}\r\n"]}