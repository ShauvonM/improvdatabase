{"version":3,"sources":["../src/ts/app/service/game-database.service.ts"],"names":[],"mappings":"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","file":"game-database.service.js","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Headers, Http } from '@angular/http';\r\n\r\nimport 'rxjs/add/operator/toPromise';\r\n\r\nimport { Name } from '../model/name';\r\nimport { Game } from '../model/game';\r\nimport { PlayerCount } from '../model/player-count';\r\nimport { Duration } from '../model/duration';\r\nimport { Tag } from '../model/tag';\r\nimport { TagGame } from '../model/tag-game';\r\nimport { Note } from '../model/note';\r\n\r\nimport { SearchResult } from '../view/toolbar.view';\r\n\r\nimport { UserService } from './user.service';\r\n\r\n@Injectable()\r\nexport class GameDatabaseService {\r\n    private gamesUrl = '/api/game';\r\n    private namesUrl = '/api/name';\r\n    private playerCountUrl = '/api/playerCount';\r\n    private durationUrl = '/api/duration';\r\n\r\n    private tagUrl = '/api/tag';\r\n    private tagGameUrl = '/api/tagGame';\r\n\r\n    private noteUrl = '/api/note';\r\n\r\n    // cache all the things\r\n    private games: Game[] = [];\r\n    private names: Name[] = [];\r\n    private playercounts: PlayerCount[] = [];\r\n    private durations: Duration[] = [];\r\n    private tags: Tag[] = [];\r\n    private tagGames: TagGame[] = [];\r\n    private notes: Note[] = [];\r\n\r\n    private sortProperty: string;\r\n\r\n    constructor(\r\n        private http: Http,\r\n        private userService: UserService\r\n        ) { }\r\n\r\n    // TODO: there's probably way too much in this file now\r\n\r\n    getGames(sortProperty = 'name'): Promise<Game[]> {\r\n        console.log('getting games, sorting by ', sortProperty);\r\n        return Promise.all([this._getGames(), this.getNames(), this.getTagGames()])\r\n            .then(() => {\r\n                // set it and forget it\r\n                this.games.forEach(game => this._setupGame(game));\r\n                this.sortProperty = sortProperty;\r\n                this.games = this._sortGames();\r\n                return this.games;\r\n            });\r\n    }\r\n\r\n    private _setupGame(game: Game): Game {\r\n        game.Names = this.getNamesByGameID(game.GameID);\r\n        game.TagGames = this.getTagGamesByGameID(game.GameID);\r\n\r\n        return game;\r\n    }\r\n\r\n    getGame(id: number): Promise<Game> {\r\n        return Promise.all([ this._getGame(id), this.getNames(), this.getTagGames() ])\r\n            .then((vals) => {\r\n                let game = vals[0];\r\n                return this._setupGame(game);\r\n            });\r\n    }\r\n\r\n    private _gamePromise: Promise<Game[]>;\r\n    private _getGames(): Promise<Game[]> {\r\n        if (!this._gamePromise) {\r\n            this._gamePromise = this.http.get(this.gamesUrl)\r\n                .toPromise()\r\n                .then(response => {\r\n                    this.games = response.json() as Game[];\r\n                    return this.games;\r\n                })\r\n                .catch(this.handleError);\r\n        } \r\n        return this._gamePromise;\r\n    }\r\n\r\n    private _getGame(id: number): Promise<Game> {\r\n        let gameToReturn: Game;\r\n        if (this.games.length > 0) {\r\n            this.games.forEach((game) => {\r\n                if (game.GameID === id) {\r\n                    gameToReturn = game;\r\n                }\r\n            })\r\n        }\r\n        if (gameToReturn) {\r\n            return Promise.resolve(gameToReturn);\r\n        } else {\r\n            // either no games are loaded or we couldn't find the specified one\r\n            return this.http.get(this.gamesUrl + '/' + id)\r\n                .toPromise()\r\n                .then(response => {\r\n                    return response.json()[0] as Game;\r\n                })\r\n                .catch(this.handleError);\r\n        }\r\n    }\r\n\r\n    private _sortGames(): Game[] {\r\n        if (this.sortProperty === 'name') {\r\n            this.games.sort((g1, g2) => {\r\n                if (!g1.Names.length) {\r\n                    return -1;\r\n                }\r\n                if (!g2.Names.length) {\r\n                    return 1;\r\n                }\r\n                if (g1.Names[0].Name > g2.Names[0].Name) {\r\n                    return 1;\r\n                }\r\n                if (g1.Names[0].Name < g2.Names[0].Name) {\r\n                    return -1;\r\n                }\r\n                return 0;\r\n            });\r\n        }\r\n        return this.games;\r\n    }\r\n\r\n    private _namePromise: Promise<Name[]>;\r\n    getNames(): Promise<Name[]> {\r\n        if (!this._namePromise) {\r\n            this._namePromise = this.http.get(this.namesUrl)\r\n                .toPromise()\r\n                .then(response => {\r\n                    this.names = response.json() as Name[];\r\n                    return this.names;\r\n                })\r\n                .catch(this.handleError);\r\n        }\r\n        return this._namePromise;\r\n    }\r\n\r\n    private _getItemsByGameID(items: any[], id: number): any[] {\r\n        let returnItems = [];\r\n        items.forEach(item => {\r\n            if (item.GameID && item.GameID == id) {\r\n                returnItems.push(item);\r\n            }\r\n        });\r\n        return returnItems;\r\n    }\r\n\r\n    getNamesByGameID(id: number): Name[] {\r\n        let names: Name[] = this._getItemsByGameID(this.names, id);\r\n        names.sort((n1, n2) => {\r\n            let comp = n2.Weight - n1.Weight;\r\n            if (comp === 0) {\r\n                return n1.DateModified > n2.DateModified ? -1 : 1;\r\n            } else {\r\n                return comp;\r\n            }\r\n        });\r\n        return names;\r\n    }\r\n\r\n    createName(gameID: number, name: string): Promise<Name> {\r\n        return this.http.post(this.namesUrl, {\r\n            GameID: gameID,\r\n            Name: name\r\n        }, this.userService.getAuthorizationHeader())\r\n            .toPromise()\r\n            .then(response => {\r\n                let name = response.json() as Name;\r\n                this.names.push(name);\r\n                return name;\r\n            })\r\n            .catch(this.handleError);\r\n    }\r\n\r\n    saveName(name: Name): Promise<Name> {\r\n        return this.http.put(this.namesUrl + '/' + name.NameID,\r\n            name, this.userService.getAuthorizationHeader())\r\n            .toPromise()\r\n            .then(response => {\r\n                let newName = response.json() as Name;\r\n                let index = this.names.indexOf(name);\r\n                if (index > -1) {\r\n                    this.names.splice(index, 1, newName);\r\n                } else {\r\n                    this.names.push(newName);\r\n                }\r\n                if (this.sortProperty == 'name') {\r\n                    this._sortGames();\r\n                }\r\n                return newName; \r\n            })\r\n    }\r\n\r\n    private _tagGamePromise: Promise<TagGame[]>;\r\n    private getTagGames(): Promise<TagGame[]> {\r\n        if (!this._tagGamePromise) {\r\n            this._tagGamePromise = this.http.get(this.tagGameUrl)\r\n                .toPromise()\r\n                .then(response => {\r\n                    this.tagGames = response.json() as TagGame[];\r\n                    return this.tagGames;\r\n                })\r\n                .catch(this.handleError);\r\n        }\r\n        return this._tagGamePromise;\r\n    }\r\n\r\n    getTagGamesByGameID(id: number): TagGame[] {\r\n        let tagGames: TagGame[] = this._getItemsByGameID(this.tagGames, id);\r\n        return tagGames;\r\n    }\r\n\r\n    private _playerCountPromise: Promise<PlayerCount[]>;\r\n    getPlayerCounts(): Promise<PlayerCount[]> {\r\n        if (!this._playerCountPromise) {\r\n            this._playerCountPromise = this.http.get(this.playerCountUrl)\r\n                .toPromise()\r\n                .then(response => {\r\n                    this.playercounts = response.json() as PlayerCount[];\r\n                    return this.playercounts;\r\n                })\r\n                .catch(this.handleError);\r\n        }\r\n        return this._playerCountPromise;\r\n    }\r\n\r\n    getPlayerCountById(id: number): Promise<PlayerCount> {\r\n        return new Promise<PlayerCount>((resolve, reject) => {\r\n            this.getPlayerCounts().then((playercounts) => {\r\n                playercounts.forEach((playercount) => {\r\n                    if (playercount.PlayerCountID == id) {\r\n                        resolve(playercount);\r\n                    }\r\n                });\r\n            })\r\n        });\r\n    }\r\n\r\n    createPlayerCount(name: string, min: number, max: number, description: string): Promise<PlayerCount> {\r\n        return this.http.post(this.playerCountUrl,\r\n            {\r\n                Name: name,\r\n                Min: min,\r\n                Max: max,\r\n                Description: description\r\n            }, this.userService.getAuthorizationHeader())\r\n            .toPromise()\r\n            .then((response) => {\r\n                let playercount = response.json() as PlayerCount;\r\n                this.playercounts.push(playercount);\r\n                return playercount;\r\n            });\r\n    }\r\n\r\n    private _durationPromise: Promise<Duration[]>;\r\n    getDurations(): Promise<Duration[]> {\r\n        if (!this._durationPromise) {\r\n            this._durationPromise = this.http.get(this.durationUrl)\r\n                .toPromise()\r\n                .then(response => {\r\n                    this.durations = response.json() as Duration[];\r\n                    return this.durations;\r\n                })\r\n                .catch(this.handleError);\r\n        }\r\n        return this._durationPromise;\r\n    }\r\n\r\n    getDurationById(id: number): Promise<Duration> {\r\n        return new Promise<Duration>((resolve, reject) => {\r\n            this.getDurations().then((durations) => {\r\n                durations.forEach((duration) => {\r\n                    if (duration.DurationID == id) {\r\n                        resolve(duration);\r\n                    }\r\n                });\r\n            })\r\n        });\r\n    }\r\n\r\n    createDuration(name: string, min: number, max: number, description: string): Promise<Duration> {\r\n        return this.http.post(this.durationUrl,\r\n            {\r\n                Name: name,\r\n                Min: min,\r\n                Max: max,\r\n                Description: description\r\n            }, this.userService.getAuthorizationHeader())\r\n            .toPromise()\r\n            .then((response) => {\r\n                let duration = response.json() as Duration;\r\n                this.durations.push(duration);\r\n                return duration;\r\n            });\r\n    }\r\n\r\n    private _tagPromise: Promise<Tag[]>;\r\n    getTags(): Promise<Tag[]> {\r\n        if (!this._tagPromise) {\r\n            this._tagPromise = this.http.get(this.tagUrl)\r\n                .toPromise()\r\n                .then(response => {\r\n                    this.tags = response.json() as Tag[];\r\n                    return this.tags;\r\n                })\r\n                .catch(this.handleError);\r\n        }\r\n        return this._tagPromise;\r\n    }\r\n\r\n    getTagById(id: number): Promise<Tag> {\r\n        return new Promise<Tag>((resolve, reject) => {\r\n            this.getTags().then((tags) => {\r\n                tags.forEach((tag) => {\r\n                    if (tag.TagID == id) {\r\n                        resolve(tag);\r\n                    }\r\n                });\r\n            });\r\n        });\r\n    }\r\n\r\n    gameHasTag(game: Game, tagIDs: number[]): boolean {\r\n        let foundTagGame: boolean = false;\r\n        game.TagGames.forEach((taggame) => {\r\n            if (tagIDs.indexOf(taggame.TagID) > -1) {\r\n                foundTagGame = true;\r\n                return false;\r\n            }\r\n        });\r\n        return foundTagGame;\r\n    }\r\n\r\n    private _notePromise: Promise<Note[]>;\r\n    getNotes(): Promise<Note[]> {\r\n        if (!this._notePromise) {\r\n            this._notePromise = this.http.get(this.noteUrl)\r\n                .toPromise()\r\n                .then(response => {\r\n                    this.notes = response.json() as Note[];\r\n                    return this.notes;\r\n                })\r\n                .catch(this.handleError);\r\n        }\r\n        return this._notePromise;\r\n    }\r\n\r\n    getNotesForGame(game: Game): Promise<Note[]> {\r\n        return new Promise<Note[]>((resolve, reject) => {\r\n            this.getNotes().then((notes) => {\r\n                let notesForGame: Note[] = [];\r\n                notes.forEach((note) => {\r\n                    if (\r\n                        note.GameID == game.GameID\r\n                        || (game.PlayerCountID && note.PlayerCountID == game.PlayerCountID)\r\n                        || (game.DurationID && note.DurationID == game.DurationID)\r\n                        || (note.TagID && this.gameHasTag(game, [note.TagID]))\r\n                    ) {\r\n                        notesForGame.push(note);\r\n                    }\r\n                });\r\n                resolve(notesForGame);\r\n            });\r\n        });\r\n    }\r\n\r\n    deleteGame(game: Game): Promise<boolean> {\r\n        return this.http.delete(this.gamesUrl + '/' + game.GameID,\r\n            this.userService.getAuthorizationHeader())\r\n            .toPromise()\r\n            .then((response) => {\r\n                this._removeGameFromArray(game);\r\n                return true;\r\n            })\r\n    }\r\n\r\n    private _removeGameFromArray(game: Game): number {\r\n        let index = this.games.indexOf(game);\r\n        if (index > -1) {\r\n            this.games.splice(index, 1);\r\n        }\r\n        return index;\r\n    }\r\n\r\n    saveGame(game: Game): Promise<Game> {\r\n        return this.http.put(this.gamesUrl + '/' + game.GameID,\r\n            game,\r\n            this.userService.getAuthorizationHeader())\r\n            .toPromise()\r\n            .then((response) => {\r\n                let index = this._removeGameFromArray(game);\r\n                let newGame = this._setupGame(response.json() as Game);\r\n                if (index > -1) {\r\n                    this.games.splice(index, 0, newGame);\r\n                } else {\r\n                    this.games.push(newGame);\r\n                }\r\n                return newGame;\r\n            })\r\n            .catch(this.handleError);\r\n    }\r\n\r\n    createGame(): Promise<Game> {\r\n        return this.http.post(this.gamesUrl,\r\n            {}, this.userService.getAuthorizationHeader())\r\n            .toPromise()\r\n            .then((response) => {\r\n                let game = response.json() as Game;\r\n                this.games.push(this._setupGame(game));\r\n                this._sortGames();\r\n                return game;\r\n            })\r\n    }\r\n\r\n    private _addTagToGame(game: Game, taggame: TagGame): void {\r\n        this.tagGames.push(taggame);\r\n        game.TagGames.push(taggame);\r\n    }\r\n\r\n    saveTagToGame(game: Game, tag: Tag): Promise<TagGame> {\r\n        return this.http.post(this.tagGameUrl,\r\n            {\r\n                TagID: tag.TagID,\r\n                GameID: game.GameID\r\n            },\r\n            this.userService.getAuthorizationHeader())\r\n            .toPromise()\r\n            .then(response => {\r\n                let taggame = response.json() as TagGame;\r\n                this._addTagToGame(game, taggame);\r\n\r\n                return taggame;\r\n            })\r\n    }\r\n\r\n    deleteTagGame(taggame: TagGame): Promise<boolean> {\r\n        return this.http.delete(this.tagGameUrl + '/' + taggame.TagGameID,\r\n            this.userService.getAuthorizationHeader())\r\n            .toPromise()\r\n            .then(() => {\r\n                let index = this.tagGames.indexOf(taggame);\r\n                if (index > -1) {\r\n                    this.tagGames.splice(index, 1);\r\n                }\r\n                this.getGame(taggame.GameID)\r\n                    .then(game => this._setupGame(game));\r\n                return true;\r\n            })\r\n    }\r\n\r\n    createTag(name: string, game: Game): Promise<Tag> {\r\n        let postObj = {\r\n            Name: name,\r\n            GameID: game.GameID\r\n        }\r\n\r\n        return this.http.post(this.tagUrl,\r\n            postObj, this.userService.getAuthorizationHeader())\r\n            .toPromise()\r\n            .then(response => {\r\n                console.log(response.json());\r\n\r\n                let resObj = response.json();\r\n                let tag = resObj['Tag'] as Tag;\r\n                this.tags.push(tag);\r\n\r\n                let taggame = resObj['TagGame'] as TagGame;\r\n                this._addTagToGame(game, taggame);\r\n\r\n                return tag;\r\n            });\r\n    }\r\n\r\n    private handleError(error: any): Promise<any> {\r\n        console.error('An error has occurred', error);\r\n        return Promise.reject(error.message || error);\r\n    }\r\n\r\n    // TODO: search stuff can be in a separate service\r\n\r\n    private _searchArray(arr: any[], type: string, idProperty: string, term: string): SearchResult[] {\r\n        let results: SearchResult[] = [];\r\n        arr.forEach((item) => {\r\n            let str = item.Name;\r\n\r\n            if (str.toLowerCase().indexOf(term) > -1) {\r\n                var regex = new RegExp('(' + term + ')', 'gi');\r\n                str = str.replace(regex, '<strong>$1</strong>');\r\n\r\n                let result: SearchResult = {\r\n                    text: str,\r\n                    id: item[idProperty],\r\n                    type: type\r\n                }\r\n                results.push(result);\r\n            }\r\n        });\r\n        return results;\r\n    }\r\n    private _sortSearchResults(results: SearchResult[]): SearchResult[] {\r\n        results.sort((r1, r2) => {\r\n            let val1 = r1.text;\r\n            let val2 = r2.text;\r\n            if (val1 > val2) {\r\n                return 1;\r\n            }\r\n            if (val1 < val2) {\r\n                return -1;\r\n            }\r\n            return 0;\r\n        });\r\n        return results;\r\n    }\r\n\r\n    searchForResults(term: string): Promise<SearchResult[]> {\r\n        return new Promise<SearchResult[]>((resolve, reject) => {\r\n            term = term.toLowerCase();\r\n            let searchResults: SearchResult[] = [];\r\n            if (term) {\r\n                Promise.all([\r\n                    this.getNames(),\r\n                    this.getTags(),\r\n                    this.getDurations(),\r\n                    this.getPlayerCounts()\r\n                ])\r\n                    .then((items) => {\r\n                        searchResults = []\r\n                            .concat(this._searchArray(items[0], 'name', 'GameID', term))\r\n                            .concat(this._searchArray(items[1], 'tag', 'TagID', term))\r\n                            .concat(this._searchArray(items[2], 'duration', 'DurationID', term))\r\n                            .concat(this._searchArray(items[3], 'playercount', 'PlayerCountID', term));\r\n\r\n                        // TODO: include player count and durations by actual values if the term is a number?\r\n\r\n                        searchResults = this._sortSearchResults(searchResults);\r\n\r\n                        resolve(searchResults);\r\n                    });\r\n            }\r\n        });\r\n    }\r\n\r\n    searchForTags(term: string): Promise<Tag[]> {\r\n        return new Promise<Tag[]>((resolve, reject) => {\r\n            term = term.toLocaleLowerCase();\r\n            let matchingTags: Tag[] = [];\r\n            if (term) {\r\n                this.getTags().then(tags => {\r\n                    tags.forEach(tag => {\r\n                        if (tag.Name.toLocaleLowerCase().indexOf(term) > -1) {\r\n                            matchingTags.push(tag);\r\n                        }\r\n                    });\r\n                    resolve(matchingTags);\r\n                });\r\n            }\r\n        })\r\n    }\r\n\r\n    searchForGames(term: string): Promise<Game[]> {\r\n        return new Promise<Game[]>((resolve, reject) => {\r\n            term = term.toLowerCase();\r\n            let gameResults: Game[] = [];\r\n            if (term) {\r\n                Promise.all([\r\n                    this.getGames(),\r\n                    this.getTags(),\r\n                    this.getDurations(),\r\n                    this.getPlayerCounts()\r\n                ])\r\n                    .then((items) => {\r\n                        \r\n                        // search the tags\r\n                        let tagResults: number[] = [];\r\n                        items[1].forEach((tag) => {\r\n                            if (tag.Name.toLowerCase().indexOf(term) > -1) {\r\n                                tagResults.push(tag.TagID);\r\n                            }\r\n                        });\r\n\r\n                        // search the durations\r\n                        let durationResults: number[] = [];\r\n                        items[2].forEach((duration) => {\r\n                            if (duration.Name.toLowerCase().indexOf(term) > -1) {\r\n                                durationResults.push(duration.DurationID);\r\n                            }\r\n                        });\r\n\r\n                        // search the player counts\r\n                        let playerCountResults: number[] = [];\r\n                        items[3].forEach((playercount) => {\r\n                            if (playercount.Name.toLowerCase().indexOf(term) > -1) {\r\n                                playerCountResults.push(playercount.PlayerCountID);\r\n                            }\r\n                        });\r\n\r\n                        // loop through the games\r\n                        items[0].forEach((game) => {\r\n                            // add it if a tag matches or if the playercount or duration matches\r\n                            if (this.gameHasTag(game, tagResults) ||\r\n                                    durationResults.indexOf(game.DurationID) > -1 ||\r\n                                    playerCountResults.indexOf(game.PlayerCountID) > -1) {\r\n                                gameResults.push(game);\r\n                            } else {\r\n                                // add it if a name matches\r\n                                game.Names.forEach((name) => {\r\n                                    if (name.Name.toLowerCase().indexOf(term) > -1 &&\r\n                                            gameResults.indexOf(game) == -1) {\r\n                                        gameResults.push(game);\r\n                                    }\r\n                                });\r\n                            }\r\n                        });\r\n\r\n                        resolve(gameResults);\r\n                    });\r\n            }\r\n        });\r\n    }\r\n}\r\n"]}