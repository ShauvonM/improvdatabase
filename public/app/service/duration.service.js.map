{"version":3,"sources":["../src/ts/app/service/duration.service.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,qBAA2B,eAAe,CAAC,CAAA;AAC3C,qBAA8B,eAAe,CAAC,CAAA;AAE9C,QAAO,6BAA6B,CAAC,CAAA;AAKrC;IAKI,yBAAoB,IAAU;QAAV,SAAI,GAAJ,IAAI,CAAM;QAJtB,gBAAW,GAAG,eAAe,CAAA;QAE7B,cAAS,GAAe,EAAE,CAAC;IAED,CAAC;IAEnC,sCAAY,GAAZ;QAAA,iBAYC;QAXG,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC;YAC9B,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,WAAW,CAAC;iBACjC,SAAS,EAAE;iBACX,IAAI,CAAC,UAAA,QAAQ;gBACV,KAAI,CAAC,SAAS,GAAG,QAAQ,CAAC,IAAI,EAAgB,CAAC;gBAC/C,MAAM,CAAC,KAAI,CAAC,SAAS,CAAC;YAC1B,CAAC,CAAC;iBACD,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QACjC,CAAC;QAAC,IAAI,CAAC,CAAC;YACJ,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;QAC3C,CAAC;IACL,CAAC;IAEO,qCAAW,GAAnB,UAAoB,KAAU;QAC1B,OAAO,CAAC,KAAK,CAAC,uBAAuB,EAAE,KAAK,CAAC,CAAC;QAC9C,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,IAAI,KAAK,CAAC,CAAC;IAClD,CAAC;IAzBL;QAAC,iBAAU,EAAE;;uBAAA;IA0Bb,sBAAC;AAAD,CAzBA,AAyBC,IAAA;AAzBY,uBAAe,kBAyB3B,CAAA","file":"duration.service.js","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Headers, Http } from '@angular/http';\r\n\r\nimport 'rxjs/add/operator/toPromise';\r\n\r\nimport { Duration } from '../model/duration';\r\n\r\n@Injectable()\r\nexport class DurationService {\r\n    private durationUrl = '/api/duration'\r\n\r\n    private durations: Duration[] = [];\r\n\r\n    constructor(private http: Http) { }\r\n\r\n    getDurations(): Promise<Duration[]> {\r\n        if (this.durations.length === 0) {\r\n            return this.http.get(this.durationUrl)\r\n                .toPromise()\r\n                .then(response => {\r\n                    this.durations = response.json() as Duration[];\r\n                    return this.durations;\r\n                })\r\n                .catch(this.handleError);\r\n        } else {\r\n            return Promise.resolve(this.durations);\r\n        }\r\n    }\r\n\r\n    private handleError(error: any): Promise<any> {\r\n        console.error('An error has occurred', error);\r\n        return Promise.reject(error.message || error);\r\n    }\r\n}"]}