{"version":3,"sources":["../../app/src/app/view/editable-metadata.view.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA,sCASuB;AAEvB,wCAAuC;AACvC,kDAAgD;AA6BhD;IAyDI;QArDS,SAAI,GAAuC,MAAM,CAAC;QA2BlD,iBAAY,GAAY,KAAK,CAAC,CAAC,iDAAiD;QAChF,eAAU,GAAY,IAAI,CAAC,CAAC,6DAA6D;QASlG;;WAEG;QACO,SAAI,GAAgC,IAAI,mBAAY,EAAE,CAAC,CAAC,6BAA6B;QACrF,gBAAW,GAA0B,IAAI,mBAAY,EAAE,CAAC,CAAC,gCAAgC;QACzF,iBAAY,GAA0B,IAAI,mBAAY,EAAE,CAAC,CAAC,8DAA8D;IAY9H,CAAC;IAEL,uCAAQ,GAAR;QACI,iDAAiD;QACjD,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;YACf,IAAI,CAAC,IAAI,GAAG,SAAS,CAAC;QAC1B,CAAC;QAAC,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;YACtB,IAAI,CAAC,IAAI,GAAG,UAAU,CAAC;QAC3B,CAAC;QAAC,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;YACnB,IAAI,CAAC,IAAI,GAAG,MAAM,CAAC;QACvB,CAAC;QAED,2CAA2C;QAC3C,IAAI,CAAC,aAAa,EAAE,CAAC;QAErB,2BAA2B;QAC3B,IAAI,CAAC,aAAa,EAAE,CAAC;QAErB,wBAAwB;QACxB,IAAI,CAAC,UAAU,EAAE,CAAC;QAElB,mEAAmE;QACnE,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,IAAI,MAAM,CAAC,CAAC,CAAC;YACtB,0DAA0D;YAC1D,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;gBAC3B,IAAI,CAAC,IAAI,GAAY,IAAI,CAAC,KAAK,CAAC;YACpC,CAAC;YAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;gBAClC,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC;YAC3B,CAAC;QACL,CAAC;QAAC,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,IAAI,SAAS,CAAC,CAAC,CAAC;YAChC,IAAI,CAAC,YAAY,EAAE,CAAC;QACxB,CAAC;QAAC,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,IAAI,UAAU,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;YAChD,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;gBACnB,0EAA0E;gBAC1E,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC;gBACpC,IAAI,CAAC,sBAAsB,GAAG,IAAI,CAAC;YACvC,CAAC;YACD,IAAI,CAAC,aAAa,EAAE,CAAC;QACzB,CAAC;QAAC,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,IAAI,MAAM,CAAC,CAAC,CAAC;YAC7B,IAAI,CAAC,SAAS,EAAE,CAAC;QACrB,CAAC;QAED,2GAA2G;QAC3G,uCAAuC;QACvC,kCAAkC;QAClC,uBAAuB;QACvB,IAAI;IACR,CAAC;IAED,0CAAW,GAAX,UAAY,OAAY;QACpB,yDAAyD;QACzD,IAAI,SAAS,GAAG,IAAI,CAAC,kBAAkB,EAAE,CAAC;QAE1C,EAAE,CAAC,CAAC,OAAO,CAAC,KAAK;eACN,IAAI,CAAC,KAAK;eACV,SAAS;eACT,SAAS,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;YACtC,+DAA+D;YAE/D,0BAA0B;YAC1B,iDAAiD;YACjD,IAAI,CAAC,aAAa,EAAE,CAAC;QAEzB,CAAC;QAAC,IAAI,CAAC,EAAE,CAAC,CAAC,OAAO,CAAC,OAAO,IAAI,OAAO,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC;YAC1D,qEAAqE;YACrE,IAAI,CAAC,aAAa,EAAE,CAAC;YACrB,EAAE,CAAC,CAAC,IAAI,CAAC,sBAAsB,CAAC,CAAC,CAAC;gBAC9B,gEAAgE;gBAChE,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC;YACxC,CAAC;YACD,IAAI,CAAC,aAAa,EAAE,CAAC;QACzB,CAAC;IACL,CAAC;IAEL,sBAAsB;IAClB;;;OAGG;IACK,4CAAa,GAArB;QAAA,iBAcC;QAbG,IAAI,CAAC,UAAU,GAAG,EAAE,CAAC;QACrB,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC;YACtC,EAAE,CAAC,CAAW,IAAI,CAAC,OAAO,CAAC,CAAC,CAAE,CAAC,GAAG,CAAC,CAAC,CAAC;gBACjC,IAAI,CAAC,UAAU,GAAc,IAAI,CAAC,OAAO,CAAC;YAC9C,CAAC;YAAC,IAAI,CAAC,CAAC;gBACQ,IAAI,CAAC,OAAQ,CAAC,OAAO,CAAC,UAAA,CAAC;oBAC/B,KAAI,CAAC,UAAU,CAAC,IAAI,CAAC;wBACjB,IAAI,EAAE,CAAC,CAAC,QAAQ,EAAE;wBAClB,GAAG,EAAE,CAAC,CAAC,QAAQ,EAAE;qBACpB,CAAC,CAAC;gBACP,CAAC,CAAC,CAAC;YACP,CAAC;QACL,CAAC;IACL,CAAC;IAED;;OAEG;IACK,4CAAa,GAArB;QACI,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;YACf,IAAI,CAAC,UAAU,GAAG;gBACd,OAAO,EAAE,IAAI,CAAC,OAAO,CAAC,OAAO;gBAC7B,IAAI,EAAE,IAAI,CAAC,OAAO,CAAC,IAAI;gBACvB,KAAK,EAAE,IAAI,CAAC,OAAO,CAAC,KAAK;gBACzB,GAAG,EAAE,IAAI,CAAC,OAAO,CAAC,GAAG;gBACrB,OAAO,EAAE,IAAI,CAAC,OAAO,CAAC,OAAO;aAChC,CAAA;QACL,CAAC;IACL,CAAC;IAEO,yCAAU,GAAlB;QACI,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,IAAI,CAAc,IAAI,CAAC,IAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YAC/C,IAAI,IAAI,GAAe,IAAI,CAAC,IAAI,CAAC;YACjC,IAAI,CAAC,OAAO,GAAG;gBACX,KAAK,EAAE,IAAI,CAAC,KAAK;gBACjB,GAAG,EAAE,IAAI,CAAC,GAAG;gBACb,IAAI,EAAE,IAAI,CAAC,IAAI;aAClB,CAAC;QACN,CAAC;QAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,IAAI,MAAM,IAAI,IAAI,CAAC,KAAK,CAAC;eAC/B,CAAC,IAAI,CAAC,IAAI,IAAY,IAAI,CAAC,IAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;YAEvD,IAAI,IAAI,SAAA,CAAC;YACT,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;gBACZ,IAAI,GAAU,IAAI,CAAC,IAAI,CAAC;YAC5B,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,QAAQ,CAAU,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;oBACxC,+CAA+C;oBAC/C,IAAI,GAAG,IAAI,IAAI,CAAC,QAAQ,CAAU,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;gBACnD,CAAC;gBAAC,IAAI,CAAC,CAAC;oBACJ,oDAAoD;oBACpD,IAAI,GAAG,IAAI,IAAI,CAAU,IAAI,CAAC,KAAK,CAAC,CAAC;gBACzC,CAAC;YACL,CAAC;YACD,IAAI,CAAC,OAAO,GAAG;gBACX,KAAK,EAAE,IAAI,CAAC,QAAQ,EAAE;gBACtB,GAAG,EAAE,IAAI,CAAC,OAAO,EAAE;gBACnB,IAAI,EAAE,IAAI,CAAC,WAAW,EAAE;aAC3B,CAAC;QACN,CAAC;IACL,CAAC;IAED,mDAAmD;IAC3C,0CAAW,GAAnB;QACI,EAAE,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC;YACA,IAAI,CAAC,YAAY,CAAC,aAAc,CAAC,KAAK,EAAE,CAAC;QACjE,CAAC;IACL,CAAC;IAED,oEAAoE;IACpE,yCAAU,GAAV;QACwB,IAAI,CAAC,YAAY,CAAC,aAAc,CAAC,IAAI,EAAE,CAAC;IAChE,CAAC;IAED;;;OAGG;IACK,iDAAkB,GAA1B;QACI,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;YACb,EAAE,CAAC,CAAW,IAAI,CAAC,KAAM,CAAC,GAAG,IAAc,IAAI,CAAC,KAAM,CAAC,IAAI,CAAC,CAAC,CAAC;gBAC1D,MAAM,CAAU,IAAI,CAAC,KAAK,CAAC;YAC/B,CAAC;YAAA,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,IAAI,UAAU,CAAC,CAAC,CAAC;gBAChC,IAAI,KAAK,GAAG,WAAI,CAAC,SAAS,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;gBACxD,EAAE,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;oBACb,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;gBAClC,CAAC;YACL,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,2EAA2E;gBAC3E,MAAM,CAAC;oBACH,GAAG,EAAW,IAAI,CAAC,KAAK;oBACxB,IAAI,EAAW,IAAI,CAAC,KAAK;iBAC5B,CAAC;YACN,CAAC;QACL,CAAC;IACL,CAAC;IACL,MAAM;IAGN;;;OAGG;IACC;;OAEG;IACH,2CAAY,GAAZ;QACI,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;YAClB,IAAI,OAAO,GAAG,IAAI,CAAC,UAAU,CAAC,OAAO,IAAI,EAAE,EACvC,IAAI,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,IAAI,EAAE,EACjC,KAAK,GAAG,IAAI,CAAC,UAAU,CAAC,KAAK,IAAI,EAAE,EACnC,GAAG,GAAG,IAAI,CAAC,UAAU,CAAC,GAAG,IAAI,EAAE,EAC/B,OAAO,GAAG,IAAI,CAAC,UAAU,CAAC,OAAO,IAAI,EAAE,CAAC;YAE5C,IAAI,CAAC,IAAI,GAAG,OAAO,CAAC;YACpB,EAAE,CAAC,CAAC,OAAO,IAAI,CAAC,IAAI,IAAI,KAAK,IAAI,GAAG,CAAC,CAAC,CAAC,CAAC;gBACpC,IAAI,CAAC,IAAI,IAAI,QAAQ,CAAC;YAC1B,CAAC;YACD,IAAI,CAAC,IAAI,IAAI,IAAI,GAAG,GAAG,GAAG,KAAK,CAAC;YAChC,EAAE,CAAC,CAAC,CAAC,IAAI,IAAI,KAAK,CAAC,IAAI,GAAG,CAAC,CAAC,CAAC;gBACzB,IAAI,CAAC,IAAI,IAAI,GAAG,CAAC;YACrB,CAAC;YACD,IAAI,CAAC,IAAI,IAAI,GAAG,GAAG,GAAG,CAAC;YACvB,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,IAAI,OAAO,CAAC,CAAC,CAAC;gBACvB,IAAI,CAAC,IAAI,IAAI,QAAQ,CAAC;YAC1B,CAAC;YACD,IAAI,CAAC,IAAI,IAAI,OAAO,CAAC;YAErB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC;QACjC,CAAC;IACL,CAAC;IAED;;OAEG;IACH,4CAAa,GAAb;QACI,IAAI,SAAS,GAAG,IAAI,CAAC,kBAAkB,EAAE,CAAC;QAC1C,EAAE,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;YACZ,qEAAqE;YACrE,IAAI,CAAC,IAAI,GAAG,SAAS,CAAC,IAAI,CAAC;YAC3B,IAAI,CAAC,IAAI,GAAG,SAAS,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,CAAC;QAC5C,CAAC;QAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;YAC1B,gEAAgE;YAChE,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;YACpC,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,CAAC;QACrD,CAAC;QAAC,IAAI,CAAC,CAAC;YACJ,cAAc;YACd,IAAI,CAAC,IAAI,GAAG,EAAE,CAAC;QACnB,CAAC;IACL,CAAC;IAED;;OAEG;IACH,wCAAS,GAAT;QACI,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;YACf,IAAI,IAAI,GAAG,IAAI,IAAI,EAAE,CAAC;YACtB,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,iBAAiB;YAClC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;YAClC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;YAC/B,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;YAEpC,IAAI,CAAC,IAAI,GAAG,oBAAQ,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;YACtC,MAAM,CAAC,IAAI,CAAC;QAChB,CAAC;QAAC,IAAI,CAAC,CAAC;YACJ,IAAI,CAAC,IAAI,GAAG,EAAE,CAAC;YACf,MAAM,CAAC,IAAI,CAAC;QAChB,CAAC;IACL,CAAC;IACL,mBAAmB;IAEnB,iBAAiB;IACb;;OAEG;IACH,uCAAQ,GAAR;QAAA,iBAUC;QATG,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;YACf,mFAAmF;YACnF,IAAI,CAAC,QAAQ,GAAa,IAAI,CAAC,KAAM,CAAC,GAAG,IAAI,IAAI,CAAC,KAAK,CAAC;YAExD,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;YACtB,UAAU,CAAC;gBACP,KAAI,CAAC,WAAW,EAAE,CAAC;YACvB,CAAC,CAAC,CAAA;QACN,CAAC;IACL,CAAC;IAED;;OAEG;IACH,wCAAS,GAAT;QACI,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;QACvB,kBAAkB;QAClB,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;QACnB,sCAAsC;QACtC,IAAI,CAAC,aAAa,EAAE,CAAC;QACrB,mCAAmC;QACnC,IAAI,CAAC,UAAU,EAAE,CAAC;IACtB,CAAC;IAED;;OAEG;IACH,uCAAQ,GAAR;QACI,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,IAAI,SAAS,CAAC,CAAC,CAAC;YACzB,4BAA4B;YAC5B,IAAI,CAAC,YAAY,EAAE,CAAC;YACpB,wBAAwB;YACxB,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;YACvC,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,UAAU,CAAC;QACnC,CAAC;QAAC,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,IAAI,UAAU,CAAC,CAAC,CAAC;YACjC,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,CAAC,CAAC;gBACxB,sBAAsB;gBACtB,IAAI,CAAC,IAAI,GAAG,KAAK,CAAC;gBAClB,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACjC,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC;gBAC3B,IAAI,CAAC,sBAAsB,GAAG,KAAK,CAAC;gBAEpC,IAAI,CAAC,aAAa,EAAE,CAAC;gBAErB,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,kBAAkB,EAAE,CAAC,CAAC;YAC9C,CAAC;QACL,CAAC;QAAC,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,IAAI,MAAM,CAAC,CAAC,CAAC;YAE7B,IAAI,IAAI,GAAG,IAAI,CAAC,SAAS,EAAE,CAAC;YAC5B,yFAAyF;YACzF,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,QAAQ,EAAE,CAAC,CAAC;YAC1C,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC;QAE7B,CAAC;QAAC,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;YACtD,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC;YAC3B,IAAI,CAAC,IAAI,GAAY,IAAI,CAAC,KAAK,CAAC;YAChC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAC/B,CAAC;QAED,IAAI,CAAC,SAAS,EAAE,CAAC;IACrB,CAAC;IApX2B;QAA3B,gBAAS,CAAC,eAAe,CAAC;;8DAAmB;IAErC;QAAR,YAAK,EAAE;;sDAAmD;IAKlD;QAAR,YAAK,EAAE;;sDAAc;IACb;QAAR,YAAK,EAAE;;sDAAc;IACb;QAAR,YAAK,EAAE;;2DAAmB;IAClB;QAAR,YAAK,EAAE;;yDAAkB;IAEjB;QAAR,YAAK,EAAE;;uDAAsB;IAUrB;QAAR,YAAK,EAAE;;yDAAkB;IAMjB;QAAR,YAAK,EAAE;;yDAA4B;IAC3B;QAAR,YAAK,EAAE;;8DAA+B;IAC9B;QAAR,YAAK,EAAE;;4DAA4B;IAM3B;QAAR,YAAK,EAAE;;sDAAsB;IAMpB;QAAT,aAAM,EAAE;kCAAO,mBAAY;sDAAqC;IACvD;QAAT,aAAM,EAAE;kCAAc,mBAAY;6DAA+B;IACxD;QAAT,aAAM,EAAE;kCAAe,mBAAY;8DAA+B;IA9C1D,oBAAoB;QALhC,gBAAS,CAAC;YACP,QAAQ,EAAE,MAAM,CAAC,EAAE;YACnB,QAAQ,EAAE,uBAAuB;YACjC,WAAW,EAAE,8CAA8C;SAC9D,CAAC;;OACW,oBAAoB,CAuXhC;IAAD,2BAAC;CAvXD,AAuXC,IAAA;AAvXY,oDAAoB","file":"editable-metadata.view.js","sourcesContent":["import { \r\n    Component,\r\n    OnInit,\r\n    OnChanges,\r\n    Input,\r\n    Output,\r\n    EventEmitter,\r\n    ViewChild,\r\n    ElementRef\r\n} from '@angular/core';\r\n\r\nimport { Util } from '../../util/util';\r\nimport { TimeUtil } from '../../util/time.util';\r\n\r\n// this is designed to work with models pulled from Mongo (like the GameMetadata model)\r\nexport interface Option {\r\n    name: string; // the text to display for this item\r\n    _id: string; // the unique id for this item, perhaps inherited from Mongo\r\n    icon?: string; // if set, will show a specific icon for that item\r\n    description?: string; // if set, will serve as the 'title' parameter on the option\r\n}\r\n\r\nexport interface Address {\r\n    address: string;\r\n    city: string;\r\n    state: string;\r\n    zip: string;\r\n    country: string;\r\n}\r\n\r\nexport interface DateInput {\r\n    month: number;\r\n    day: number;\r\n    year: number;\r\n}\r\n\r\n@Component({\r\n    moduleId: module.id,\r\n    selector: '.id-editable-metadata',\r\n    templateUrl: '../template/view/editable-metadata.view.html'\r\n})\r\nexport class EditableMetadataView implements OnInit, OnChanges {\r\n\r\n    @ViewChild('metadataInput') inputElement: any;\r\n\r\n    @Input() type: 'text'|'address'|'dropdown'|'date' = 'text';\r\n\r\n    /**\r\n     * Standard options\r\n     */\r\n    @Input() icon: string; // an icon to show if necessary\r\n    @Input() text: string; // the text to show when not editing\r\n    @Input() blankText: string; // the fallback text to show if there is no text\r\n    @Input() canEdit: boolean; // whether the user can edit this thing\r\n\r\n    @Input() model: string|Option; // the selected object\r\n        // for dropdowns, this will be the _id of the selected option (or the selected option itself)\r\n        // for text, this is the user input\r\n        // for date, you can pass in a date object, an ISO string, or a Unix epoch time (as a string)\r\n        // address type doesn't use this\r\n\r\n    /**\r\n     * Address type input\r\n     * We take an object as input, and then convert it to an internal property\r\n     */\r\n    @Input() address: Address;\r\n    useAddress: Address;\r\n\r\n    /**\r\n     * Dropdown type options\r\n     */\r\n    @Input() options: string[]|Option[]; // options to show in the dropdown\r\n    @Input() optionCreate: boolean = false; // whether to allow creating new dropdown options\r\n    @Input() allowBlank: boolean = true; // if false, the default text will come from the first option\r\n\r\n    /**\r\n     * Date type input, for manually setting the date (you can use the model input to pass a timestamp)\r\n     * Like address, we take an object as input, and convert it to an internal property\r\n     */\r\n    @Input() date: DateInput|Date;\r\n    useDate: DateInput;\r\n\r\n    /**\r\n     * Events\r\n     */\r\n    @Output() save: EventEmitter<string|Option> = new EventEmitter(); // called when the item saves\r\n    @Output() saveAddress: EventEmitter<Address> = new EventEmitter(); // called when the address saves\r\n    @Output() createOption: EventEmitter<boolean> = new EventEmitter(); // should trigger a dialog or something to create a new option\r\n\r\n    /**\r\n     * Internal properties\r\n     */\r\n    editShown: boolean; // if true, the control is shown, if false, the 'text' object is shown\r\n    useOptions: Option[]; // the options to actually show in the dropdown (digested from the input)\r\n    useModel: string|Option; // a clone of the model to actually use in the template, so we can revert changes if necessary\r\n\r\n    private _defaultOptionSelected: boolean; // just in case we pick a default option, we can remember that\r\n\r\n    constructor(\r\n    ) { }\r\n\r\n    ngOnInit(): void {\r\n        // automatically figure out the type, if possible\r\n        if (this.address) {\r\n            this.type = 'address';\r\n        } else if (this.options) {\r\n            this.type = 'dropdown';\r\n        } else if (this.date) {\r\n            this.type = 'date';\r\n        }\r\n\r\n        // set up the useOptions array if necessary\r\n        this.digestOptions();\r\n\r\n        // digest the address input\r\n        this.digestAddress();\r\n\r\n        // digest the date input\r\n        this.digestDate();\r\n\r\n        // generate the text to display, based on the type of thing this is\r\n        if (this.type == 'text') {\r\n            // you can set it up with either the text or model options\r\n            if (this.model && !this.text) {\r\n                this.text = <string> this.model;\r\n            } else if (!this.model && this.text) {\r\n                this.model = this.text;\r\n            }\r\n        } else if (this.type == 'address') {\r\n            this.setupAddress();\r\n        } else if (this.type == 'dropdown' && !this.model) {\r\n            if (!this.allowBlank) {\r\n                // initially we want to set the default option here to make sure it is set\r\n                this.model = this.useOptions[0]._id;\r\n                this._defaultOptionSelected = true;\r\n            }\r\n            this.setupDropdown();\r\n        } else if (this.type == 'date') {\r\n            this.setupDate();\r\n        }\r\n\r\n        // if we went through any setup and still don't have any text to display, only now do we use the blank text\r\n        // if (!this.text && this.allowBlank) {\r\n        //     this.text = this.blankText;\r\n        //     this.model = '';\r\n        // }\r\n    }\r\n\r\n    ngOnChanges(changes: any): void {\r\n        // if the model changes externally, we should react to it\r\n        let selection = this._getSelectedOption();\r\n\r\n        if (changes.model \r\n                && this.model \r\n                && selection\r\n                && selection.name !== this.text) {\r\n            // the model has changed externally, so we should react to that\r\n            \r\n            // reset the text and icon\r\n            // this method works even if we aren't a dropdown\r\n            this.setupDropdown();\r\n\r\n        } else if (changes.options && changes.options.previousValue) {\r\n            // the options have changed, so we have to update our internal values\r\n            this.digestOptions();\r\n            if (this._defaultOptionSelected) {\r\n                // reset the selection because the first item might have changed\r\n                this.model = this.useOptions[0]._id;\r\n            }\r\n            this.setupDropdown();\r\n        }\r\n    }\r\n\r\n/** UTILITY METHODS */\r\n    /**\r\n     * Ensures that the internal useOptions array is an array of DropdownOption objects\r\n     * @param options an array of either strings or dropdownoptions\r\n     */\r\n    private digestOptions(): void {\r\n        this.useOptions = [];\r\n        if (this.options && this.options.length) {\r\n            if ((<Option> this.options[0])._id) {\r\n                this.useOptions = <Option[]> this.options;\r\n            } else {\r\n                (<string[]> this.options).forEach(o => {\r\n                    this.useOptions.push({\r\n                        name: o.toString(),\r\n                        _id: o.toString()\r\n                    });\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Convert the Address input object into the internal string properties\r\n     */\r\n    private digestAddress(): void {\r\n        if (this.address) {\r\n            this.useAddress = {\r\n                address: this.address.address,\r\n                city: this.address.city,\r\n                state: this.address.state,\r\n                zip: this.address.zip,\r\n                country: this.address.country\r\n            }\r\n        }\r\n    }\r\n\r\n    private digestDate(): void {\r\n        if (this.date && ((<DateInput> this.date).month)) {\r\n            let date = <DateInput> this.date;\r\n            this.useDate = {\r\n                month: date.month,\r\n                day: date.day,\r\n                year: date.year\r\n            };\r\n        } else if ((this.type == 'date' && this.model)\r\n                    || (this.date && (<Date> this.date).getTime)) {\r\n\r\n            let date;\r\n            if (this.date) {\r\n                date = <Date> this.date;\r\n            } else {\r\n                if (!isNaN(parseInt(<string> this.model))) {\r\n                    // we can assume this is a unix epoch timestamp\r\n                    date = new Date(parseInt(<string> this.model));\r\n                } else {\r\n                    // hopefully it's some sort of date parseable string\r\n                    date = new Date(<string> this.model);\r\n                }\r\n            }\r\n            this.useDate = {\r\n                month: date.getMonth(),\r\n                day: date.getDate(),\r\n                year: date.getFullYear()\r\n            };\r\n        }\r\n    }\r\n\r\n    /** Sets focus in the input element (fancy that) */\r\n    private _focusInput(): void {\r\n        if (this.inputElement) {\r\n            (<HTMLInputElement> this.inputElement.nativeElement).focus();\r\n        }\r\n    }\r\n\r\n    /** Triggers a blur on the input element when the user hits enter */\r\n    pressEnter(): void {\r\n        (<HTMLInputElement> this.inputElement.nativeElement).blur();\r\n    }\r\n\r\n    /**\r\n     * Returns the selected dropdown option (or null), using the internal model property\r\n     * This method handles converting the model into a DropdownOption\r\n     */\r\n    private _getSelectedOption(): Option {\r\n        if (this.model) {\r\n            if ((<Option> this.model)._id && (<Option> this.model).name) {\r\n                return <Option> this.model;\r\n            }else if (this.type == 'dropdown') {\r\n                let index = Util.indexOfId(this.useOptions, this.model);\r\n                if (index > -1) {\r\n                    return this.useOptions[index];\r\n                }\r\n            } else {\r\n                // if this isn't a dropdown, the model is just a string, so we just need it\r\n                return {\r\n                    _id: <string> this.model,\r\n                    name: <string> this.model\r\n                };\r\n            }\r\n        }\r\n    }\r\n/** */\r\n\r\n\r\n/** SETUP METHODS\r\n *  These generate the text and icon properties for any types that need to be set up\r\n *  They should leave this.text blank - don't fall back on the blankText here\r\n */\r\n    /**\r\n     * Generates the text to display from the passed address data\r\n     */\r\n    setupAddress(): void {\r\n        if (this.useAddress) {\r\n            let address = this.useAddress.address || '',\r\n                city = this.useAddress.city || '',\r\n                state = this.useAddress.state || '',\r\n                zip = this.useAddress.zip || '',\r\n                country = this.useAddress.country || '';\r\n\r\n            this.text = address;\r\n            if (address && (city || state || zip)) {\r\n                this.text += '<br />';\r\n            }\r\n            this.text += city + ' ' + state;\r\n            if ((city || state) && zip) {\r\n                this.text += ',';\r\n            }\r\n            this.text += ' ' + zip;\r\n            if (this.text && country) {\r\n                this.text += '<br />';\r\n            }\r\n            this.text += country;\r\n\r\n            this.text = this.text.trim();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Generate the text and icon from the selected dropdown option\r\n     */\r\n    setupDropdown(): void {\r\n        let selection = this._getSelectedOption();\r\n        if (selection) {\r\n            // this means something is actually selected, so we can show its info\r\n            this.text = selection.name;\r\n            this.icon = selection.icon || this.icon;\r\n        } else if (!this.allowBlank) {\r\n            // if we can't have blank, we should default to the first option\r\n            this.text = this.useOptions[0].name;\r\n            this.icon = this.useOptions[0].icon || this.icon;\r\n        } else {\r\n            // we're blank\r\n            this.text = '';\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Set up the text with the currently set date info\r\n     */\r\n    setupDate(): Date {\r\n        if (this.useDate) {\r\n            let date = new Date();\r\n            date.setTime(0); // reset the time\r\n            date.setMonth(this.useDate.month);\r\n            date.setDate(this.useDate.day);\r\n            date.setFullYear(this.useDate.year);\r\n\r\n            this.text = TimeUtil.simpleDate(date);\r\n            return date;\r\n        } else {\r\n            this.text = '';\r\n            return null;\r\n        }\r\n    }\r\n/** END OF SETUP */\r\n\r\n/** UX METHODS */\r\n    /**\r\n     * Toggle the UI to show the edit controls instead of the text property\r\n     */\r\n    showEdit(): void {\r\n        if (this.canEdit) {\r\n            // we will actually edit a copy of the stored model, so we can revert it if we want\r\n            this.useModel = (<Option> this.model)._id || this.model;\r\n\r\n            this.editShown = true;\r\n            setTimeout(() => {\r\n                this._focusInput();\r\n            })\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Resets the control, reverting any changes\r\n     */\r\n    closeEdit(): void {\r\n        this.editShown = false;\r\n        // discard changes\r\n        this.useModel = '';\r\n        // this will revert the address params\r\n        this.digestAddress();\r\n        // this will revert the date params\r\n        this.digestDate();\r\n    }\r\n\r\n    /**\r\n     * Saves the user's input and then broadcasts the new value to the output\r\n     */\r\n    saveEdit(): void {\r\n        if (this.type == 'address') {\r\n            // update the displayed text\r\n            this.setupAddress();\r\n            // output the new values\r\n            this.saveAddress.emit(this.useAddress);\r\n            this.address = this.useAddress;\r\n        } else if (this.type == 'dropdown') {\r\n            if (this.useModel == '-1') {\r\n                // create a new thing!\r\n                this.text = '...';\r\n                this.createOption.emit(true);\r\n            } else {\r\n                this.model = this.useModel;\r\n                this._defaultOptionSelected = false;\r\n\r\n                this.setupDropdown();\r\n\r\n                this.save.emit(this._getSelectedOption());\r\n            }\r\n        } else if (this.type == 'date') {\r\n            \r\n            let date = this.setupDate();\r\n            // just to avoid too many translations, we can just output the unix timestamp as a string\r\n            this.save.emit(date.getTime().toString());\r\n            this.date = this.useDate;\r\n\r\n        } else if (this.useModel && this.useModel != this.model) {\r\n            this.model = this.useModel;\r\n            this.text = <string> this.model;\r\n            this.save.emit(this.model);\r\n        }\r\n\r\n        this.closeEdit();\r\n    }\r\n}\r\n"]}