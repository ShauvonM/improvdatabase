{"version":3,"sources":["../../app/src/app/view/editable-metadata.view.ts"],"names":[],"mappings":"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","file":"editable-metadata.view.js","sourcesContent":["import { \r\n    Component,\r\n    OnInit,\r\n    Input,\r\n    Output,\r\n    EventEmitter,\r\n    ViewChild,\r\n    ElementRef\r\n} from '@angular/core';\r\n\r\nimport { Address } from '../../model/address';\r\nimport { GameMetadata } from '../../model/game-metadata';\r\n\r\n@Component({\r\n    moduleId: module.id,\r\n    selector: '.improvplus-editable-metadata',\r\n    templateUrl: '../template/view/editable-metadata.view.html'\r\n})\r\nexport class EditableMetadataView implements OnInit {\r\n\r\n    @ViewChild('metadataInput') inputElement: any;\r\n\r\n    @Input() icon: string; // an icon to show if necessary\r\n    @Input() text: string; // the text to show by default\r\n    @Input() model: GameMetadata; // pass an object if you want, this will try to use the name property if it exists\r\n    @Input() blankText: string; // the fallback text to show if there is no text\r\n    @Input() canEdit: boolean; // whether the user can edit this thing\r\n\r\n    @Input() type: string; // 'text' 'address' or 'dropdown'\r\n\r\n    @Output() save: EventEmitter<any> = new EventEmitter(); // called when the item saves\r\n    @Output() saveAddress: EventEmitter<Address> = new EventEmitter(); // called when the address saves\r\n\r\n    private editShown: boolean;\r\n\r\n    private editModel: string;\r\n\r\n    // these properties are for address types\r\n    @Input() address: string;\r\n    @Input() city: string;\r\n    @Input() state: string;\r\n    @Input() zip: string;\r\n    @Input() country: string;\r\n\r\n    // for dropdowns, the items to show\r\n    @Input() options: GameMetadata[];\r\n    @Input() optionId: string = '_id'; // the property to use as the ID for each option\r\n    @Input() optionDescription: string = 'description'; // the property to use as the title attribute on each option\r\n    @Input() optionText: string = 'name'; // the property to use to get the text for each option\r\n    @Input() optionCreate: boolean = false; // whether to allow creating new dropdown options\r\n\r\n    @Output() createOption: EventEmitter<boolean> = new EventEmitter(); // should trigger a dialog or something to create a new option\r\n\r\n    constructor(\r\n    ) { }\r\n\r\n    ngOnInit(): void {\r\n        if (!this.text && this.model && this.model.hasOwnProperty('name')) {\r\n            this.text = this.model.name;\r\n        }\r\n\r\n        if (!this.type) {\r\n            if (this.address) {\r\n                this.type = 'address';\r\n            } else if (this.options) {\r\n                this.type = 'dropdown';\r\n            } else {\r\n                this.type = 'text';\r\n            }\r\n        }\r\n\r\n        if (this.type == 'address') {\r\n            this.setupAddress();\r\n        }\r\n    }\r\n\r\n    private _focusInput(): void {\r\n        if (this.inputElement) {\r\n            (<HTMLInputElement> this.inputElement.nativeElement).focus();\r\n        }\r\n    }\r\n\r\n    setupAddress(): void {\r\n        let address = this.address || '',\r\n            city = this.city || '',\r\n            state = this.state || '',\r\n            zip = this.zip || '',\r\n            country = this.country || '';\r\n\r\n        this.text = address;\r\n        if (address && (city || state || zip)) {\r\n            this.text += '<br />';\r\n        }\r\n        this.text += city + ' ' + state;\r\n        if ((city || state) && zip) {\r\n            this.text += ',';\r\n        }\r\n        this.text += ' ' + zip;\r\n        if (this.text && country) {\r\n            this.text += '<br />';\r\n        }\r\n        this.text += country;\r\n\r\n        this.text = this.text.trim();\r\n    }\r\n\r\n    showEdit(): void {\r\n        if (this.canEdit) {\r\n            if (this.model) {\r\n                this.editModel = this.optionId ? this.model[this.optionId] : this.text;\r\n            } else {\r\n                this.editModel = this.text\r\n            }\r\n\r\n            this.editShown = true;\r\n            setTimeout(() => {\r\n                this._focusInput();\r\n            })\r\n        }\r\n    }\r\n\r\n    closeEdit(): void {\r\n        this.editShown = false;\r\n        this.editModel = this.text;\r\n    }\r\n\r\n    pressEnter(): void {\r\n        (<HTMLInputElement> this.inputElement.nativeElement).blur();\r\n    }\r\n\r\n    saveEdit(): void {\r\n        if (this.type == 'address') {\r\n            this.setupAddress();\r\n            this.saveAddress.emit({\r\n                address: this.address,\r\n                city: this.city,\r\n                state: this.state,\r\n                zip: this.zip,\r\n                country: this.country\r\n            });\r\n        } else if (this.type == 'dropdown') {\r\n            if (this.editModel == '-1') {\r\n                // create a new thing!\r\n                this.createOption.emit(true);\r\n            } else {\r\n                let selection: any;\r\n                if (this.optionId) {\r\n                    this.options.forEach(option => {\r\n                        if (option[this.optionId] == this.editModel) {\r\n                            selection = option;\r\n                        }\r\n                    });\r\n                } else {\r\n                    selection = this.editModel;\r\n                }\r\n                this.text = this.optionText ? selection[this.optionText] : selection;\r\n                this.save.emit(selection);\r\n            }\r\n        } else if (this.editModel && this.editModel != this.text) {\r\n            this.text = this.editModel;\r\n            this.save.emit(this.editModel);\r\n        }\r\n\r\n        this.closeEdit();\r\n    }\r\n}\r\n"]}