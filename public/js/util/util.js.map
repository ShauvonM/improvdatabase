{"version":3,"sources":["../../app/src/util/util.ts"],"names":[],"mappings":";;AAEA,IAAI,MAAW,CAAC;AAMhB;IAAA;IAqEA,CAAC;IAnEG;;;;OAIG;IACI,cAAS,GAAhB,UAAkB,KAA6B,EAAE,MAA0B;QACvE,IAAI,KAAK,GAAG,CAAC,CAAC,EACV,IAAI,GAAkB,MAAO,CAAC,GAAG,GAAkB,MAAO,CAAC,GAAG,GAAG,MAAM,CAAC;QAE5E,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC;YAChB,MAAM,CAAC,KAAK,CAAC;QACjB,CAAC;QAAC,IAAI,CAAC,EAAE,CAAC,CAAe,KAAK,CAAC,CAAC,CAAE,CAAC,GAAG,CAAC,CAAC,CAAC;YACrB,KAAM,CAAC,IAAI,CAAC,UAAC,CAAC,EAAE,CAAC;gBAC7B,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,IAAI,CAAC,CAAC,CAAC;oBAChB,KAAK,GAAG,CAAC,CAAC;oBACV,MAAM,CAAC,IAAI,CAAC;gBAChB,CAAC;YACL,CAAC,CAAC,CAAC;QACP,CAAC;QAAC,IAAI,CAAC,CAAC;YACO,KAAM,CAAC,IAAI,CAAC,UAAC,CAAC,EAAE,CAAC;gBACxB,EAAE,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,CAAC,CAAC;oBACZ,KAAK,GAAG,CAAC,CAAC;oBACV,MAAM,CAAC,IAAI,CAAC;gBAChB,CAAC;YACL,CAAC,CAAC,CAAC;QACP,CAAC;QACD,MAAM,CAAC,KAAK,CAAC;IACjB,CAAC;IAEM,gBAAW,GAAlB,UAAmB,YAAoB,EAAE,cAA+B;QACpE,MAAM,GAAG,MAAM,IAAI,MAAM,CAAC,YAAY,CAAC,CAAC;QAExC,IAAI,QAAQ,GAAG,MAAM,CAAC,QAAQ,EAAE,CAAC;QACjC,IAAI,UAAU,GAAG,QAAQ,CAAC,MAAM,CAAC,MAAM,EAAE;YACrC,sCAAsC;YACtC,KAAK,EAAE;gBACH,IAAI,EAAE;oBACF,KAAK,EAAE,SAAS;oBAChB,UAAU,EAAE,MAAM;oBAClB,UAAU,EAAE,yCAAyC;oBACrD,aAAa,EAAE,aAAa;oBAC5B,QAAQ,EAAE,MAAM;oBAEhB,eAAe,EAAE;wBACb,KAAK,EAAE,oBAAoB;qBAC9B;iBACJ;gBACD,OAAO,EAAE;oBACL,KAAK,EAAE,SAAS;oBAChB,SAAS,EAAE,SAAS;iBACvB;aACJ;SACJ,CAAC,CAAC;QAEH,EAAE,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC;YACjB,UAAU,CAAC,gBAAgB,CAAC,QAAQ,EAAE,cAAc,CAAC,CAAC;QAC1D,CAAC;QAED,MAAM,CAAC,UAAU,CAAC;IACtB,CAAC;IAEM,mBAAc,GAArB,UAAsB,YAAoB,EAAE,UAAe;QACvD,MAAM,GAAG,MAAM,IAAI,MAAM,CAAC,YAAY,CAAC,CAAC;QAExC,MAAM,CAAC,MAAM,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC,CAAC,kBAAkB;IAC7D,CAAC;IAEL,WAAC;AAAD,CArEA,AAqEC,IAAA;AArEY,oBAAI","file":"util.js","sourcesContent":["declare var Stripe: any;\r\n\r\nlet stripe: any;\r\n\r\ninterface MongoObject {\r\n    _id: string;\r\n}\r\n\r\nexport class Util {\r\n\r\n    /**\r\n     * Returns the index of the object in the array, whether the array is an array of strings or an array of objects\r\n     * @param array array of items to search in, either strings or objects with _id property\r\n     * @param object item to search for, either a string or an object with _id property\r\n     */\r\n    static indexOfId (array: string[]|MongoObject[], object: string|MongoObject): number {\r\n        let index = -1,\r\n            term = (<MongoObject> object)._id ? (<MongoObject> object)._id : object;\r\n        \r\n        if (!array.length) {\r\n            return index;\r\n        } else if ((<MongoObject>array[0])._id) {\r\n            (<MongoObject[]>array).some((o, i) => {\r\n                if (o._id == term) {\r\n                    index = i;\r\n                    return true;\r\n                }\r\n            });\r\n        } else {\r\n            (<string[]>array).some((o, i) => {\r\n                if (o == term) {\r\n                    index = i;\r\n                    return true;\r\n                }\r\n            });\r\n        }\r\n        return index;\r\n    }\r\n\r\n    static setupStripe(stripeConfig: string, changeCallback?: (e?:any)=>void ): any {\r\n        stripe = stripe || Stripe(stripeConfig);\r\n\r\n        let elements = stripe.elements();\r\n        let creditCard = elements.create('card', {\r\n            // value: {postalCode: this.user.zip},\r\n            style: {\r\n                base: {\r\n                    color: '#32325d',\r\n                    lineHeight: '24px',\r\n                    fontFamily: '\"Helvetica Neue\", Helvetica, sans-serif',\r\n                    fontSmoothing: 'antialiased',\r\n                    fontSize: '16px',\r\n\r\n                    '::placeholder': {\r\n                        color: 'rgba(96,96,96,0.5)'\r\n                    }\r\n                },\r\n                invalid: {\r\n                    color: '#fa755a',\r\n                    iconColor: '#fa755a'\r\n                }\r\n            }\r\n        });\r\n\r\n        if (changeCallback) {\r\n            creditCard.addEventListener('change', changeCallback);\r\n        }\r\n        \r\n        return creditCard;\r\n    }\r\n\r\n    static getStripeToken(stripeConfig: string, creditCard: any): Promise<any> {\r\n        stripe = stripe || Stripe(stripeConfig);\r\n\r\n        return stripe.createToken(creditCard); //.then(callback);\r\n    }\r\n\r\n}"]}