{"version":3,"sources":["../../app/src/service/app.service.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA,sCAA2C;AAK3C,uCAAqC;AAErC,0CAAiC;AAEjC,6CAA2C;AAM3C;IASI,oBACY,IAAa;QAAb,SAAI,GAAJ,IAAI,CAAS;IACrB,CAAC;IAEG,gCAAW,GAAnB,UAAoB,KAAU;QAC1B,OAAO,CAAC,KAAK,CAAC,uBAAuB,EAAE,KAAK,CAAC,CAAC;QAC9C,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,IAAI,KAAK,CAAC,CAAC;IAClD,CAAC;IAED,gCAAW,GAAX,UAAa,GAAiB;QAC1B,IAAI,CAAC,QAAQ,GAAG,GAAG,CAAC;IACxB,CAAC;IAED,gCAAW,GAAX;QACI,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC;IACzB,CAAC;IAED,iCAAY,GAAZ,UAAc,IAAU;QACpB,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,eAAG,CAAC,YAAY,EAAE,IAAI,CAAC;aACxC,SAAS,EAAE;aACX,IAAI,CAAC,UAAC,QAAQ;YACX,IAAI,IAAI,GAAG,QAAQ,CAAC,IAAI,EAAE,CAAC;YAC3B,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,IAAI,OAAO,CAAC,CAAC,CAAC;gBAC3B,MAAM,CAAC,2DAA2D,CAAC;YACvE,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,MAAM,CAAC,EAAE,CAAC;YACd,CAAC;QACL,CAAC,CAAC,CAAA;IACV,CAAC;IAED,iCAAY,GAAZ,UAAc,IAAU;QACpB,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,eAAG,CAAC,YAAY,EAAE,IAAI,CAAC;aACxC,SAAS,EAAE;aACX,IAAI,CAAC,UAAA,QAAQ;YACV,IAAI,IAAI,GAAG,QAAQ,CAAC,IAAI,EAAE,CAAC;YAC3B,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,IAAI,MAAM,CAAC,CAAC,CAAC;gBAC1B,MAAM,CAAC,8DAA8D,CAAC;YAC1E,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,MAAM,CAAC,EAAE,CAAC;YACd,CAAC;QACL,CAAC,CAAC,CAAC;IACX,CAAC;IAlDQ,UAAU;QADtB,iBAAU,EAAE;yCAWS,kBAAO;OAVhB,UAAU,CAoDtB;IAAD,iBAAC;CApDD,AAoDC,IAAA;AApDY,gCAAU","file":"app.service.js","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Headers } from '@angular/http';\r\nimport { UrlSegment } from '@angular/router';\r\n\r\nimport { Observable, Subject } from 'rxjs/Rx';\r\nimport 'rxjs/add/operator/toPromise';\r\n\r\nimport {API} from '../constants';\r\n\r\nimport { AppHttp } from '../data/app-http';\r\n\r\nimport { User } from '../model/user';\r\nimport { Team } from '../model/team';\r\n\r\n@Injectable()\r\nexport class AppService {\r\n\r\n    // private packageUrl = '/api/package/';\r\n\r\n    // private userValidateUrl = '/api/user/validate';\r\n    // private teamValidateUrl = '/api/team/validate';\r\n\r\n    private redirect: UrlSegment[];\r\n    \r\n    constructor(\r\n        private http: AppHttp\r\n    ) { }\r\n\r\n    private handleError(error: any): Promise<any> {\r\n        console.error('An error has occurred', error);\r\n        return Promise.reject(error.message || error);\r\n    }\r\n\r\n    setRedirect (url: UrlSegment[]): void {\r\n        this.redirect = url;\r\n    }\r\n\r\n    getRedirect (): UrlSegment[] {\r\n        return this.redirect;\r\n    }\r\n\r\n    validateUser (user: User): Promise<string> {\r\n        return this.http.post(API.validateUser, user)\r\n            .toPromise()\r\n            .then((response) => {\r\n                let data = response.json();\r\n                if (data.conflict == 'email') {\r\n                    return 'That email address is already registered on the database.';\r\n                } else {\r\n                    return '';\r\n                }\r\n            })\r\n    }\r\n\r\n    validateTeam (team: Team): Promise<string> {\r\n        return this.http.post(API.validateTeam, team)\r\n            .toPromise()\r\n            .then(response => {\r\n                let data = response.json();\r\n                if (data.conflict == 'name') {\r\n                    return 'A team with that name is already registered on the database.';\r\n                } else {\r\n                    return '';\r\n                }\r\n            });\r\n    }\r\n\r\n}"]}