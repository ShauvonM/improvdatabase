{"version":3,"sources":["../../src/ts/data/http-interceptor.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,sCAQuB;AAEvB,8CAA6C;AAI7C;IAAsB,2BAAI;IAEtB,iBACI,OAA0B,EAC1B,cAA8B,EACtB,MAAc,EACd,WAAwB;QAJpC,YAMI,kBAAM,OAAO,EAAE,cAAc,CAAC,SACjC;QAJW,YAAM,GAAN,MAAM,CAAQ;QACd,iBAAW,GAAX,WAAW,CAAa;;IAGpC,CAAC;IAED,yBAAO,GAAP,UAAQ,GAAqB,EAAE,OAA4B;QACvD,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,iBAAM,OAAO,YAAC,GAAG,EAAE,IAAI,CAAC,oBAAoB,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;IAClF,CAAC;IAED,qBAAG,GAAH,UAAI,GAAW,EAAE,OAA4B;QACzC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,iBAAM,GAAG,YAAC,GAAG,EAAE,IAAI,CAAC,oBAAoB,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;IAC9E,CAAC;IAED,sBAAI,GAAJ,UAAK,GAAW,EAAE,IAAS,EAAE,OAA4B;QACrD,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,iBAAM,IAAI,YAAC,GAAG,EAAE,IAAI,EAAE,IAAI,CAAC,oBAAoB,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;IACrF,CAAC;IAED,qBAAG,GAAH,UAAI,GAAW,EAAE,IAAS,EAAE,OAA4B;QACpD,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,iBAAM,GAAG,YAAC,GAAG,EAAE,IAAI,EAAE,IAAI,CAAC,oBAAoB,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;IACpF,CAAC;IAED,wBAAM,GAAN,UAAO,GAAW,EAAE,OAA4B;QAC5C,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,iBAAM,MAAM,YAAC,GAAG,EAAE,IAAI,CAAC,oBAAoB,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;IACjF,CAAC;IAED,sCAAoB,GAApB,UAAqB,OAA4B;QAC7C,EAAE,CAAC,CAAC,OAAO,IAAI,IAAI,CAAC,CAAC,CAAC;YAClB,OAAO,GAAG,IAAI,qBAAc,EAAE,CAAC;QACnC,CAAC;QACD,EAAE,CAAC,CAAC,OAAO,CAAC,OAAO,IAAI,IAAI,CAAC,CAAC,CAAC;YAC1B,OAAO,CAAC,OAAO,GAAG,IAAI,cAAO,EAAE,CAAC;QACpC,CAAC;QACD,IAAI,CAAC,WAAW,CAAC,yBAAyB,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;QAC5D,MAAM,CAAC,OAAO,CAAC;IACnB,CAAC;IAED,2BAAS,GAAT,UAAU,UAAgC;QAA1C,iBASC;QARG,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,UAAC,GAAG,EAAE,MAAM;YAChC,EAAE,CAAC,CAAC,GAAG,CAAC,MAAM,IAAI,GAAG,IAAI,GAAG,CAAC,GAAG,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;gBACvD,KAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,mBAAmB,CAAC,CAAC,CAAC;gBAC5C,MAAM,CAAC,uBAAU,CAAC,KAAK,EAAE,CAAC;YAC9B,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,MAAM,CAAC,uBAAU,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;YACjC,CAAC;QACL,CAAC,CAAC,CAAC;IACP,CAAC;IAEL,cAAC;AAAD,CArDA,AAqDC,CArDqB,WAAI,GAqDzB","file":"http-interceptor.js","sourcesContent":["import { \r\n    Headers,\r\n    Http,\r\n    Request,\r\n    ConnectionBackend,\r\n    RequestOptions,\r\n    RequestOptionsArgs,\r\n    Response\r\n} from '@angular/http';\r\nimport { Router } from '@angular/router';\r\nimport { Observable } from 'rxjs/Observable';\r\n\r\nimport { UserService } from '../service/user.service';\r\n\r\nclass AppHttp extends Http {\r\n\r\n    constructor(\r\n        backend: ConnectionBackend,\r\n        defaultOptions: RequestOptions,\r\n        private router: Router,\r\n        private userService: UserService\r\n    ) {\r\n        super(backend, defaultOptions);\r\n    }\r\n\r\n    request(url: string | Request, options?: RequestOptionsArgs): Observable<Response> {\r\n        return this.intercept(super.request(url, this.getRequestOptionArgs(options)));\r\n    }\r\n\r\n    get(url: string, options?: RequestOptionsArgs): Observable<Response> {\r\n        return this.intercept(super.get(url, this.getRequestOptionArgs(options)));\r\n    }\r\n\r\n    post(url: string, body: any, options?: RequestOptionsArgs): Observable<Response> {\r\n        return this.intercept(super.post(url, body, this.getRequestOptionArgs(options)));\r\n    }\r\n\r\n    put(url: string, body: any, options?: RequestOptionsArgs): Observable<Response> {\r\n        return this.intercept(super.put(url, body, this.getRequestOptionArgs(options)));\r\n    }\r\n\r\n    delete(url: string, options?: RequestOptionsArgs): Observable<Response> {\r\n        return this.intercept(super.delete(url, this.getRequestOptionArgs(options)));\r\n    }\r\n\r\n    getRequestOptionArgs(options?: RequestOptionsArgs): RequestOptionsArgs {\r\n        if (options == null) {\r\n            options = new RequestOptions();\r\n        }\r\n        if (options.headers == null) {\r\n            options.headers = new Headers();\r\n        }\r\n        this.userService.appendAuthorizationHeader(options.headers);\r\n        return options;\r\n    }\r\n\r\n    intercept(observable: Observable<Response>): Observable<Response> {\r\n        return observable.catch((err, source) => {\r\n            if (err.status == 401 && err.url.indexOf('/login') == -1) {\r\n                this.router.navigate(['/app/unauthorized']);\r\n                return Observable.empty();\r\n            } else {\r\n                return Observable.throw(err);\r\n            }\r\n        });\r\n    }\r\n\r\n}"]}