{"version":3,"sources":["../../src/ts/component/signup.component.ts"],"names":[],"mappings":"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","file":"signup.component.js","sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\n\r\nimport { AppComponent } from './app.component';\r\nimport { UserService } from '../service/user.service';\r\nimport { LibraryService } from '../service/library.service';\r\nimport { CartService } from '../service/cart.service';\r\n\r\nimport { Config } from '../config';\r\n\r\nimport { User } from '../model/user';\r\nimport { Package } from '../model/package';\r\n\r\ndeclare var Stripe: any;\r\n\r\n@Component({\r\n    moduleId: module.id,\r\n    selector: \"signup\",\r\n    templateUrl: '../template/signup.component.html'\r\n})\r\nexport class SignupComponent implements OnInit {\r\n\r\n    user: User;\r\n    packages: Package[];\r\n\r\n    selectedPackage: Package;\r\n\r\n    isLoadingPackages: boolean = false;\r\n\r\n    isPosting: boolean = false;\r\n\r\n    step: number = 1;\r\n\r\n    stripe: any;\r\n    card: any;\r\n    cardError: string;\r\n\r\n    cardComplete: boolean = false;\r\n\r\n    constructor(\r\n        private _app: AppComponent,\r\n        private router: Router,\r\n        private userService: UserService,\r\n        private libraryService: LibraryService,\r\n        private cartService: CartService\r\n    ) { }\r\n\r\n    ngOnInit(): void {\r\n        \r\n        this.user = new User();\r\n        this.user.improvExp = 1;\r\n        this.user.facilitationExp = 1;\r\n\r\n        this.isLoadingPackages = true;\r\n        this.libraryService.getPackages().then(packages => {\r\n            this.packages = packages;\r\n            this.isLoadingPackages = false;\r\n        });\r\n\r\n        this.step1();\r\n\r\n    }\r\n\r\n    step1(): void {\r\n        this.step = 1;\r\n        this.cartService.reset();\r\n    }\r\n\r\n    selectPackage(pack: Package): void {\r\n        this.selectedPackage = pack;\r\n        this.cartService.addPackage(pack);\r\n        this.showUser();\r\n    }\r\n\r\n    showUser(): void {\r\n        this.step = 2;\r\n    }\r\n\r\n    saveUser(user: User): void {\r\n\r\n        if (!user || !user.email) {\r\n            return;\r\n        }\r\n\r\n        this.user = user;\r\n        this.cartService.setUser(this.user);\r\n\r\n        this.step = 3;\r\n\r\n        // let button = document.querySelector('.button.raised'),\r\n        //     color = document.defaultView.getComputedStyle(button)['background-color'];\r\n\r\n        // setup the stripe credit card input\r\n        setTimeout(() => {\r\n            this.stripe = Stripe(Config.STRIPE_KEY);\r\n            let elements = this.stripe.elements();\r\n            this.card = elements.create('card', {\r\n                value: {postalCode: this.user.zip},\r\n                style: {\r\n                    base: {\r\n                        color: '#32325d',\r\n                        lineHeight: '24px',\r\n                        fontFamily: '\"Helvetica Neue\", Helvetica, sans-serif',\r\n                        fontSmoothing: 'antialiased',\r\n                        fontSize: '16px',\r\n\r\n                        '::placeholder': {\r\n                            color: 'rgba(96,96,96,0.5)'\r\n                        }\r\n                    },\r\n                    invalid: {\r\n                        color: '#fa755a',\r\n                        iconColor: '#fa755a'\r\n                    }\r\n                }\r\n            });\r\n            this.card.mount('#card-element');\r\n\r\n            this.card.addEventListener('change', e => {\r\n                \r\n                this.cardComplete = e.complete;\r\n\r\n                if (e.error) {\r\n                    this.cardError = e.error.message;\r\n                } else {\r\n                    this.cardError = '';\r\n                }\r\n            });\r\n\r\n        }, 100)\r\n\r\n    }\r\n\r\n    submitPayment(): void {\r\n        if (this.cardError || !this.cardComplete) {\r\n            return;\r\n        }\r\n\r\n        this.isPosting = true;\r\n        this.stripe.createToken(this.card).then(result => {\r\n            if (result.error) {\r\n                this.cardError = result.error.message;\r\n            } else {\r\n                this.cartService.charge(result.token)\r\n                    .catch(response => {\r\n                        this.isPosting = false;\r\n                        let msg = response.json();\r\n                        if (msg.error && msg.error == 'email already exists') {\r\n                            this.showUser();\r\n                        }\r\n                    })\r\n                    .then(user => {\r\n                        if (user) {\r\n                            return this.userService.login(this.user.email, this.user.password);\r\n                        }\r\n                    });\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n}\r\n"]}