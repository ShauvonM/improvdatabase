{"version":3,"sources":["../../src/ts/component/invite.component.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA,sCAGuC;AACvC,0CAAmE;AAEnE,iDAA+C;AAC/C,wDAAsD;AAEtD,+CAA+C;AAU/C,IAAa,eAAe;IAgBxB,yBACY,IAAkB,EAClB,MAAc,EACd,KAAqB,EACrB,WAAwB;QAHxB,SAAI,GAAJ,IAAI,CAAc;QAClB,WAAM,GAAN,MAAM,CAAQ;QACd,UAAK,GAAL,KAAK,CAAgB;QACrB,gBAAW,GAAX,WAAW,CAAa;QAdpC,iBAAY,GAAW,SAAS,CAAC;IAe7B,CAAC;IAEL,kCAAQ,GAAR;QAAA,iBAMC;QALG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,UAAC,MAAc;YACrC,KAAI,CAAC,QAAQ,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC;QACjC,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;IAC7B,CAAC;IAED,sCAAY,GAAZ;QAAA,iBA2BC;QA1BG,IAAI,CAAC,WAAW,CAAC,YAAY,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,QAAQ,CAAC;aACjF,KAAK,CAAC,UAAA,KAAK;YACR,KAAI,CAAC,YAAY,GAAG,OAAO,CAAC;YAC5B,IAAI,IAAI,GAAG,KAAK,CAAC,IAAI,EAAE,CAAC;YACxB,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;gBACb,MAAM,CAAA,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;oBAChB,KAAK,gBAAgB;wBACjB,KAAI,CAAC,KAAK,GAAG,6CAA6C,CAAC;wBAC3D,KAAK,CAAC;oBACV,KAAK,cAAc;wBACf,KAAI,CAAC,KAAK,GAAG,yDAAyD,CAAC;wBACvE,KAAK,CAAC;oBACV,KAAK,aAAa;wBACd,KAAI,CAAC,KAAK,GAAG,2GAA2G,CAAC;wBACzH,KAAK,CAAC;oBACV;wBACI,KAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;wBACxB,KAAK,CAAC;gBACd,CAAC;YACL,CAAC;QACL,CAAC,CAAC;aACD,IAAI,CAAC,UAAA,IAAI;YACN,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;gBACP,KAAI,CAAC,WAAW,CAAC,KAAK,CAAC,KAAI,CAAC,KAAK,EAAE,KAAI,CAAC,QAAQ,CAAC,CAAC;YACtD,CAAC;QACL,CAAC,CAAC,CAAC;IACX,CAAC;IAEL,sBAAC;AAAD,CA5DA,AA4DC,IAAA;AAvDG;IAHC,kBAAW,CAAC,wBAAwB,CAAC;IACrC,kBAAW,CAAC,YAAY,CAAC;;iDAET;AALR,eAAe;IAR3B,gBAAS,CAAC;QACP,QAAQ,EAAE,MAAM,CAAC,EAAE;QACnB,QAAQ,EAAE,QAAQ;QAClB,WAAW,EAAE,mCAAmC;QAChD,UAAU,EAAE;YACR,sBAAU,CAAC,MAAM;SACpB;KACJ,CAAC;qCAkBoB,4BAAY;QACV,eAAM;QACP,uBAAc;QACR,0BAAW;GApB3B,eAAe,CA4D3B;AA5DY,0CAAe","file":"invite.component.js","sourcesContent":["import { \r\n    Component,\r\n    OnInit,\r\n    HostBinding } from '@angular/core';\r\nimport { Router, ActivatedRoute, Params }   from '@angular/router';\r\n\r\nimport { AppComponent } from './app.component';\r\nimport { UserService } from '../service/user.service';\r\n\r\nimport { DialogAnim } from '../util/anim.util';\r\n\r\n@Component({\r\n    moduleId: module.id,\r\n    selector: \"invite\",\r\n    templateUrl: '../template/invite.component.html',\r\n    animations: [\r\n        DialogAnim.dialog\r\n    ]\r\n})\r\nexport class InviteComponent implements OnInit {\r\n\r\n    @HostBinding('class.dialog-container') \r\n    @HostBinding('class.show')\r\n    \r\n    inviteId: string;\r\n    dialogStatus: string = 'default';\r\n\r\n    email: string;\r\n    password: string;\r\n    userName: string;\r\n\r\n    error: string;\r\n\r\n    isPosting: boolean;\r\n\r\n    constructor(\r\n        private _app: AppComponent,\r\n        private router: Router,\r\n        private route: ActivatedRoute,\r\n        private userService: UserService\r\n    ) { }\r\n\r\n    ngOnInit(): void {\r\n        this.route.params.forEach((params: Params) => {\r\n            this.inviteId = params['id'];\r\n        });\r\n\r\n        this._app.backdrop(true);\r\n    }\r\n\r\n    submitInvite(): void {\r\n        this.userService.acceptInvite(this.inviteId, this.email, this.password, this.userName)\r\n            .catch(error => {\r\n                this.dialogStatus = 'shake';\r\n                let data = error.json();\r\n                if (data.error) {\r\n                    switch(data.error) {\r\n                        case 'unknown invite':\r\n                            this.error = 'That is apparently not a valid invite code.';\r\n                            break;\r\n                        case 'invite taken':\r\n                            this.error = 'Someone seems to have claimed that invite code already.';\r\n                            break;\r\n                        case 'wrong email':\r\n                            this.error = 'For security reasons, enter the email address that this invite code was sent to. You can change it later.';\r\n                            break;\r\n                        default:\r\n                            this.error = data.error;\r\n                            break;\r\n                    }\r\n                }\r\n            })\r\n            .then(user => {\r\n                if (user) {\r\n                    this.userService.login(this.email, this.password);\r\n                }\r\n            });\r\n    }\r\n\r\n}\r\n"]}