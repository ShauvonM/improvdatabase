{"version":3,"sources":["../../src/ts/service/cart.service.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA,sCAA2C;AAE3C,uCAAqC;AAErC,6CAA2C;AAG3C,8CAA6C;AAK7C,+CAA6C;AAG7C,IAAa,WAAW;IAOpB,qBACY,IAAa,EACb,WAAwB;QADxB,SAAI,GAAJ,IAAI,CAAS;QACb,gBAAW,GAAX,WAAW,CAAa;QAR5B,cAAS,GAAG,SAAS,CAAC;QACtB,cAAS,GAAG,SAAS,CAAC;QAEtB,SAAI,GAAe,EAAE,CAAC;IAMtB,CAAC;IAET,2BAAK,GAAL;QACI,IAAI,CAAC,IAAI,GAAG,EAAE,CAAC;IACnB,CAAC;IAED,gCAAU,GAAV,UAAW,IAAa;QACpB,IAAI,QAAQ,GAAG,IAAI,mBAAQ,EAAE,CAAC;QAC9B,EAAE,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,UAAU,EAAE,CAAC,CAAC,CAAC;YAChC,QAAQ,CAAC,IAAI,GAAG,IAAI,CAAC,WAAW,CAAC,eAAe,EAAE,CAAC,GAAG,CAAC;QAC3D,CAAC;QACD,QAAQ,CAAC,IAAI,GAAG,SAAS,CAAC;QAC1B,QAAQ,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;QAC5B,QAAQ,CAAC,OAAO,GAAG,IAAI,CAAA;QAEvB,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QAEzB,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC;IACrB,CAAC;IAED,6BAAO,GAAP,UAAQ,IAAU;QACd,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;IACrB,CAAC;IAED,4BAAM,GAAN,UAAO,KAAa;QAChB,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE;YAClC,WAAW,EAAE,KAAK;YAClB,IAAI,EAAE,IAAI,CAAC,IAAI;YACf,IAAI,EAAE,IAAI,CAAC,IAAI;SAClB,CAAC,CAAC,SAAS,EAAE;aACT,IAAI,CAAC,UAAA,MAAM;YACR,MAAM,CAAC,MAAM,CAAC,IAAI,EAAU,CAAC;QACjC,CAAC,CAAC,CAAA;IACV,CAAC;IAED,4BAAM,GAAN,UAAO,KAAa,EAAE,KAAa,EAAE,QAAgB,EAAE,IAAa,EAAE,QAAgB,EAAE,QAAgB;QACpG,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;QACtB,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE;YAClC,WAAW,EAAE,KAAK;YAClB,IAAI,EAAE,IAAI,CAAC,IAAI;YACf,KAAK,EAAE,KAAK;YACZ,QAAQ,EAAE,QAAQ;YAClB,QAAQ,EAAE,QAAQ;YAClB,QAAQ,EAAE,QAAQ;SACrB,CAAC,CAAC,SAAS,EAAE;aACT,IAAI,CAAC,UAAA,MAAM;YACR,MAAM,CAAC,MAAM,CAAC,IAAI,EAAU,CAAC;QACjC,CAAC,CAAC,CAAA;IACV,CAAC;IACL,kBAAC;AAAD,CA3DA,AA2DC,IAAA;AA3DY,WAAW;IADvB,iBAAU,EAAE;qCASS,kBAAO;QACA,0BAAW;GAT3B,WAAW,CA2DvB;AA3DY,kCAAW","file":"cart.service.js","sourcesContent":["import { Injectable } from '@angular/core';\r\n\r\nimport 'rxjs/add/operator/toPromise';\r\n\r\nimport { AppHttp } from '../data/app-http';\r\n\r\nimport { Package } from '../model/package';\r\nimport { Purchase } from '../model/purchase';\r\nimport { MaterialItem, MaterialItemVersion } from '../model/material-item';\r\nimport { Subscription } from '../model/subscription';\r\n\r\nimport { User } from '../model/user';\r\nimport { UserService } from './user.service';\r\n\r\n@Injectable()\r\nexport class CartService {\r\n    private chargeUrl = \"/charge\";\r\n    private signupUrl = \"/signup\";\r\n\r\n    private cart: Purchase[] = [];\r\n    private user: User;\r\n\r\n    constructor(\r\n        private http: AppHttp,\r\n        private userService: UserService\r\n        ) { }\r\n\r\n    reset(): void {\r\n        this.cart = [];\r\n    }\r\n\r\n    addPackage(pack: Package): Purchase[] {\r\n        let purchase = new Purchase();\r\n        if (this.userService.isLoggedIn()) {\r\n            purchase.user = this.userService.getLoggedInUser()._id;\r\n        }\r\n        purchase.type = 'package';\r\n        purchase.total = pack.price;\r\n        purchase.package = pack\r\n        \r\n        this.cart.push(purchase);\r\n\r\n        return this.cart;\r\n    }\r\n\r\n    setUser(user: User): void {\r\n        this.user = user;\r\n    }\r\n\r\n    charge(token: String): Promise<User> {\r\n        return this.http.post(this.chargeUrl, {\r\n            stripeToken: token,\r\n            cart: this.cart,\r\n            user: this.user\r\n        }).toPromise()\r\n            .then(result => {\r\n                return result.json() as User;\r\n            })\r\n    }\r\n\r\n    signup(token: string, email: string, password: string, pack: Package, userName: string, teamName: string) {\r\n        this.addPackage(pack);\r\n        return this.http.post(this.signupUrl, {\r\n            stripeToken: token,\r\n            cart: this.cart,\r\n            email: email,\r\n            password: password,\r\n            userName: userName,\r\n            teamName: teamName\r\n        }).toPromise()\r\n            .then(result => {\r\n                return result.json() as User;\r\n            })\r\n    }\r\n}"]}