{"version":3,"sources":["../../src/ts/service/team.service.ts"],"names":[],"mappings":"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","file":"team.service.js","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Headers } from '@angular/http';\r\n\r\nimport { Observable, Subject } from 'rxjs/Rx';\r\nimport 'rxjs/add/operator/toPromise';\r\n\r\nimport { AppHttp } from '../data/app-http';\r\n\r\nimport { User } from \"../model/user\";\r\nimport { Team } from '../model/team';\r\nimport { Purchase } from '../model/purchase';\r\nimport { Invite } from '../model/invite';\r\n\r\n@Injectable()\r\nexport class TeamService {\r\n\r\n    private teamUrl = '/api/team/';\r\n    private validateUrl = this.teamUrl + 'validate';\r\n\r\n    private teams: Team[] = [];\r\n\r\n    constructor(\r\n        private http: AppHttp\r\n    ) {\r\n    }\r\n\r\n    addTeams(teams: Team[]): void {\r\n        teams.forEach(team => {\r\n            this.addTeam(team);\r\n        });\r\n    }\r\n\r\n    addTeam(team: Team): void {\r\n        let index = this.teams.findIndex(t => {\r\n            return t._id === team._id;\r\n        });\r\n        \r\n        if (index > -1) {\r\n            this.teams.splice(index, 1);\r\n        }\r\n\r\n        this.teams.push(team);\r\n    }\r\n\r\n    findTeamById(id: string): Team {\r\n        let selectedTeam = null;\r\n        this.teams.forEach(team => {\r\n            if (team._id == id) {\r\n                selectedTeam = team;\r\n            }\r\n        })\r\n        return selectedTeam;\r\n    }\r\n\r\n    getTeam(id: string): Promise<Team> {\r\n        let team = this.findTeamById(id);\r\n        if (team) {\r\n            return new Promise<Team>((res, rej) => {\r\n                res(team);\r\n            });\r\n        } else {\r\n            return this.http.get(this.teamUrl + id)\r\n                .toPromise()\r\n                .then(response => {\r\n                    return response.json() as Team;\r\n                });\r\n        }\r\n    }\r\n\r\n    saveTeam(team: Team): Promise<Team> {\r\n        return this.http.put(this.teamUrl + team._id, team)\r\n            .toPromise()\r\n            .then(response => {\r\n                let team = response.json() as Team;\r\n                this.addTeam(team);\r\n                return team;\r\n            })\r\n    }\r\n\r\n    validate(team: Team): Promise<string> {\r\n        return this.http.post(this.teamUrl + 'validate', team)\r\n            .toPromise()\r\n            .then(response => {\r\n                let data = response.json();\r\n                if (data.conflict == 'name') {\r\n                    return 'A team with that name is already registered on ImprovPlus';\r\n                } else {\r\n                    return '';\r\n                }\r\n            });\r\n    }\r\n\r\n    invite(team: Team, email: string): Promise<Invite> {\r\n        return this.http.post(this.teamUrl + team._id + '/invite', {email: email})\r\n            .toPromise()\r\n            .then(response => {\r\n                let invite = response.json() as Invite;\r\n                let teamToUpdate = this.findTeamById(team._id);\r\n                if (teamToUpdate) {\r\n                    teamToUpdate.subscription.invites.push(invite);\r\n                }\r\n                \r\n                return invite;\r\n            })\r\n    }\r\n    \r\n    fetchPurchases(team: Team): Promise<Purchase[]> {\r\n        return this.http.get(this.teamUrl + team._id + '/purchases')\r\n            .toPromise()\r\n            .then(response => {\r\n                return response.json() as Purchase[];\r\n            });\r\n    }\r\n\r\n}"]}