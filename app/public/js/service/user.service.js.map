{"version":3,"sources":["../../src/ts/service/user.service.ts"],"names":[],"mappings":"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","file":"user.service.js","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Headers, Http } from '@angular/http';\r\n\r\nimport { Observable, Subject } from 'rxjs/Rx';\r\nimport 'rxjs/add/operator/toPromise';\r\n\r\nimport { User } from \"../model/user\";\r\n\r\nimport { LocalStorage } from \"../util/webstorage.util\";\r\n\r\n@Injectable()\r\nexport class UserService {\r\n\r\n    private loginUrl = '/login';\r\n    private logoutUrl = '/logout';\r\n    private refreshUrl = '/refreshToken';\r\n    private userUrl = '/api/user/';\r\n\r\n    @LocalStorage() token: string;\r\n    @LocalStorage() tokenExpires: number;\r\n    @LocalStorage() loggedInUser: User;\r\n\r\n    private logginStateSource = new Subject<User>();\r\n\r\n    loginState$ = this.logginStateSource.asObservable();\r\n\r\n    constructor(\r\n        private http: Http\r\n    ) { }\r\n\r\n    // TODO: onInit, check the token expiration against Date.now() and clear the session if necessary\r\n\r\n    announceLoginState() {\r\n        this.logginStateSource.next(this.loggedInUser);\r\n    }\r\n\r\n    login(email: string, password: string): Promise<User> {\r\n        return this.http.post(this.loginUrl, {\r\n                email: email,\r\n                password: password\r\n            }).toPromise()\r\n            .then(response => this._handleLoginRequest(response));\r\n    }\r\n\r\n    refreshToken(): Promise<User> {\r\n        return this.http.post(this.refreshUrl, {}, this.getAuthorizationHeader())\r\n            .toPromise()\r\n            .then(response => this._handleLoginRequest(response));\r\n    }\r\n\r\n    _handleLoginRequest(response): User {\r\n        let responseData = response.json();\r\n\r\n        this.token = responseData['token'];\r\n        this.tokenExpires = responseData['expires'];\r\n        this.loggedInUser = responseData['user'];\r\n\r\n        // don't save the password\r\n        this.loggedInUser.password = \"\";\r\n\r\n        this.announceLoginState();\r\n\r\n        return this.loggedInUser;\r\n    }\r\n\r\n    getAuthorizationHeader (): Object {\r\n        let headers = new Headers();\r\n        headers.append('x-access-token', this.getToken());\r\n        return { headers: headers };\r\n    }\r\n\r\n    logout(): Promise<boolean> {\r\n        return this.http.post(this.logoutUrl, {},\r\n            this.getAuthorizationHeader())\r\n            .toPromise()\r\n            .then(() => {\r\n                this.token = null;\r\n                this.loggedInUser = null;\r\n\r\n                this.announceLoginState();\r\n                return true;\r\n            });\r\n    }\r\n\r\n    isLoggedIn(): boolean {\r\n        return this.token !== \"\" && this.token !== null;\r\n    }\r\n\r\n    private getToken(): string {\r\n        return this.token;\r\n    }\r\n\r\n    getLoggedInUser(): User {\r\n        return this.loggedInUser;\r\n    }\r\n\r\n    /**\r\n     * Change information on the current user\r\n     */\r\n    updateUser(user: User): Promise<User> {\r\n        return this.http.put(this.userUrl + this.loggedInUser._id, user, \r\n            this.getAuthorizationHeader())\r\n            .toPromise()\r\n            .then((response) => {\r\n                this.loggedInUser = response.json() as User;\r\n                return this.loggedInUser;\r\n            });\r\n    }\r\n\r\n    // getPermissions (): Object {\r\n    //     let permObject = {};\r\n    //     // let perms = this.loggedInUser && this.loggedInUser.Permissions ? this.loggedInUser.Permissions : [];\r\n    //     // perms.forEach((perm) => {\r\n    //     //     /*\r\n    //     //     let parts = perm.split('_');\r\n    //     //     let cat = parts[0];\r\n    //     //     let act = parts[1];\r\n    //     //     if (!permObject[cat]) {\r\n    //     //         permObject[cat] = {};\r\n    //     //     }\r\n    //     //     permObject[cat][act] = true;\r\n    //     //     */\r\n    //     //     permObject[perm] = true;\r\n    //     // });\r\n    //     return permObject;\r\n    // }\r\n\r\n    can (key: string): boolean {\r\n        if (!this.loggedInUser || !this.loggedInUser.actions.length) {\r\n            return false;\r\n        } else {\r\n            return this.loggedInUser.actions.indexOf(key) > -1;\r\n        }\r\n    }\r\n\r\n}"]}