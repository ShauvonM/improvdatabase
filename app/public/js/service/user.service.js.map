{"version":3,"sources":["../../src/ts/service/user.service.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA,sCAA2C;AAG3C,8BAA8C;AAC9C,uCAAqC;AAErC,6CAA2C;AAE3C,sCAAqC;AAErC,2DAAuD;AAEvD;IAAA;IAIA,CAAC;IAAD,oBAAC;AAAD,CAJA,AAIC,IAAA;AAGD,IAAa,WAAW;IAgBpB,qBACY,IAAa;QAAb,SAAI,GAAJ,IAAI,CAAS;QAfjB,aAAQ,GAAG,QAAQ,CAAC;QACpB,cAAS,GAAG,SAAS,CAAC;QACtB,eAAU,GAAG,eAAe,CAAC;QAC7B,YAAO,GAAG,YAAY,CAAC;QACvB,gBAAW,GAAG,IAAI,CAAC,OAAO,GAAG,UAAU,CAAC;QAMxC,sBAAiB,GAAG,IAAI,YAAO,EAAQ,CAAC;QAEhD,gBAAW,GAAG,IAAI,CAAC,iBAAiB,CAAC,YAAY,EAAE,CAAC;IAKpD,CAAC;IAED,0CAAoB,GAApB;QACI,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,oBAAoB,EAAE,CAAC,CAAC,CAAC;YACpC,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;YACzB,MAAM,CAAC,KAAK,CAAC;QACjB,CAAC;QAAC,IAAI,CAAC,CAAC;YACJ,MAAM,CAAC,IAAI,CAAC;QAChB,CAAC;IACL,CAAC;IAED,wCAAkB,GAAlB;QACI,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;IACnD,CAAC;IAED,2BAAK,GAAL,UAAM,KAAa,EAAE,QAAgB;QAArC,iBAMC;QALG,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE;YAC7B,KAAK,EAAE,KAAK;YACZ,QAAQ,EAAE,QAAQ;SACrB,CAAC,CAAC,SAAS,EAAE;aACb,IAAI,CAAC,UAAA,QAAQ,IAAI,OAAA,KAAI,CAAC,mBAAmB,CAAC,QAAQ,CAAC,EAAlC,CAAkC,CAAC,CAAC;IAC9D,CAAC;IAED,kCAAY,GAAZ;QAAA,iBAMC;QALG,EAAE,CAAC,CAAC,IAAI,CAAC,oBAAoB,EAAE,CAAC,CAAC,CAAC;YAC9B,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE,EAAE,CAAC;iBACrC,SAAS,EAAE;iBACX,IAAI,CAAC,UAAA,QAAQ,IAAI,OAAA,KAAI,CAAC,mBAAmB,CAAC,QAAQ,CAAC,EAAlC,CAAkC,CAAC,CAAC;QAC9D,CAAC;IACL,CAAC;IAED,yCAAmB,GAAnB,UAAoB,QAAQ;QACxB,IAAI,YAAY,GAAG,QAAQ,CAAC,IAAI,EAAmB,CAAC;QAEpD,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,KAAK,EAAE,YAAY,CAAC,OAAO,CAAC,CAAC;QAE7D,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC,IAAI,CAAC;QAEtC,0BAA0B;QAC1B,IAAI,CAAC,YAAY,CAAC,QAAQ,GAAG,EAAE,CAAC;QAEhC,IAAI,CAAC,kBAAkB,EAAE,CAAC;QAE1B,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC;IAC7B,CAAC;IAED,yDAAyD;IACzD,wFAAwF;IACxF,yCAAyC;IACzC,6DAA6D;IAC7D,QAAQ;IACR,sBAAsB;IACtB,IAAI;IAEJ,sCAAsC;IACtC,yEAAyE;IACzE,IAAI;IAEJ,4BAAM,GAAN;QAAA,iBAWC;QAVG,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,EAAE,CAAC;aACpC,SAAS,EAAE;aACX,IAAI,CAAC;YACF,KAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;YAC5B,qBAAqB;YACrB,KAAI,CAAC,YAAY,GAAG,IAAI,CAAC;YAEzB,KAAI,CAAC,kBAAkB,EAAE,CAAC;YAC1B,MAAM,CAAC,IAAI,CAAC;QAChB,CAAC,CAAC,CAAC;IACX,CAAC;IAED,gCAAU,GAAV;QACI,MAAM,CAAC,IAAI,CAAC,YAAY,IAAI,IAAI,CAAC;IACrC,CAAC;IAED,+BAA+B;IAC/B,yBAAyB;IACzB,IAAI;IAEJ,qCAAe,GAAf;QACI,EAAE,CAAC,CAAC,IAAI,CAAC,oBAAoB,EAAE,CAAC,CAAC,CAAC;YAC9B,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC;QAC7B,CAAC;QAAC,IAAI,CAAC,CAAC;YACJ,MAAM,CAAC,IAAI,CAAC;QAChB,CAAC;IACL,CAAC;IAED;;OAEG;IACH,gCAAU,GAAV,UAAW,IAAU;QAArB,iBAOC;QANG,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,YAAY,CAAC,GAAG,EAAE,IAAI,CAAC;aAC3D,SAAS,EAAE;aACX,IAAI,CAAC,UAAC,QAAQ;YACX,KAAI,CAAC,YAAY,GAAG,QAAQ,CAAC,IAAI,EAAU,CAAC;YAC5C,MAAM,CAAC,KAAI,CAAC,YAAY,CAAC;QAC7B,CAAC,CAAC,CAAC;IACX,CAAC;IAED,mCAAa,GAAb,UAAc,GAAW,EAAE,GAAW;QAAtC,iBASC;QARG,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,YAAY,CAAC,GAAG,GAAG,aAAa,EAAE;YACxE,GAAG,EAAE,GAAG;YACR,GAAG,EAAE,GAAG;SACX,CAAC,CAAC,SAAS,EAAE;aACT,IAAI,CAAC,UAAC,QAAQ;YACX,KAAI,CAAC,YAAY,GAAG,QAAQ,CAAC,IAAI,EAAU,CAAC;YAC5C,MAAM,CAAC,KAAI,CAAC,YAAY,CAAC;QAC7B,CAAC,CAAC,CAAC;IACX,CAAC;IAED,mCAAa,GAAb,UAAc,GAAW;QACrB,IAAI,KAAK,GAAW,EAAE,CAAC;QAEvB,EAAE,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,CAAC,CAAC;YAChC,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,OAAO,CAAC,UAAA,IAAI;gBACtC,EAAE,CAAC,CAAC,IAAI,CAAC,GAAG,IAAI,GAAG,CAAC,CAAC,CAAC;oBAClB,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;gBACvB,CAAC;YACL,CAAC,CAAC,CAAC;QACP,CAAC;QAED,MAAM,CAAC,KAAK,CAAC;IACjB,CAAC;IAED,yBAAG,GAAH,UAAK,GAAW;QACZ,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,YAAY,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC;YAC1D,MAAM,CAAC,KAAK,CAAC;QACjB,CAAC;QAAC,IAAI,CAAC,CAAC;YACJ,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;QACvD,CAAC;IACL,CAAC;IAED,kCAAY,GAAZ;QACI,MAAM,CAAC,IAAI,CAAC,YAAY,IAAI,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC;IAC7D,CAAC;IAED,8BAAQ,GAAR,UAAU,IAAU;QAChB,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC;aACxC,SAAS,EAAE;aACX,IAAI,CAAC,UAAC,QAAQ;YACX,IAAI,IAAI,GAAG,QAAQ,CAAC,IAAI,EAAE,CAAC;YAC3B,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;gBAChB,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC;YACzB,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,MAAM,CAAC,EAAE,CAAC;YACd,CAAC;QACL,CAAC,CAAC,CAAA;IACV,CAAC;IAEL,kBAAC;AAAD,CAxKA,AAwKC,IAAA;AA9JmB;IAAf,8BAAY,EAAE;8BAAe,WAAI;iDAAC;AAV1B,WAAW;IADvB,iBAAU,EAAE;qCAkBS,kBAAO;GAjBhB,WAAW,CAwKvB;AAxKY,kCAAW","file":"user.service.js","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Headers } from '@angular/http';\r\n\r\nimport { Observable, Subject } from 'rxjs/Rx';\r\nimport 'rxjs/add/operator/toPromise';\r\n\r\nimport { AppHttp } from '../data/app-http';\r\n\r\nimport { User } from \"../model/user\";\r\n\r\nimport { LocalStorage } from \"../util/webstorage.util\";\r\n\r\nclass LoginResponse {\r\n    user: User;\r\n    token: string;\r\n    expires: number;\r\n}\r\n\r\n@Injectable()\r\nexport class UserService {\r\n\r\n    private loginUrl = '/login';\r\n    private logoutUrl = '/logout';\r\n    private refreshUrl = '/refreshToken';\r\n    private userUrl = '/api/user/';\r\n    private validateUrl = this.userUrl + 'validate';\r\n\r\n    // @LocalStorage() token: string;\r\n    // @LocalStorage() tokenExpires: number;\r\n    @LocalStorage() loggedInUser: User;\r\n\r\n    private logginStateSource = new Subject<User>();\r\n\r\n    loginState$ = this.logginStateSource.asObservable();\r\n\r\n    constructor(\r\n        private http: AppHttp\r\n    ) {\r\n    }\r\n\r\n    checkTokenExpiration(): boolean {\r\n        if (!this.http.checkTokenExpiration()) {\r\n            this.loggedInUser = null;\r\n            return false;\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    announceLoginState() {\r\n        this.logginStateSource.next(this.loggedInUser);\r\n    }\r\n\r\n    login(email: string, password: string): Promise<User> {\r\n        return this.http.post(this.loginUrl, {\r\n                email: email,\r\n                password: password\r\n            }).toPromise()\r\n            .then(response => this._handleLoginRequest(response));\r\n    }\r\n\r\n    refreshToken(): Promise<User> {\r\n        if (this.checkTokenExpiration()) {\r\n            return this.http.post(this.refreshUrl, {})\r\n                .toPromise()\r\n                .then(response => this._handleLoginRequest(response));\r\n        }\r\n    }\r\n\r\n    _handleLoginRequest(response): User {\r\n        let responseData = response.json() as LoginResponse;\r\n\r\n        this.http.setToken(responseData.token, responseData.expires);\r\n\r\n        this.loggedInUser = responseData.user;\r\n\r\n        // don't save the password\r\n        this.loggedInUser.password = \"\";\r\n\r\n        this.announceLoginState();\r\n\r\n        return this.loggedInUser;\r\n    }\r\n\r\n    // appendAuthorizationHeader(headers: Headers): Headers {\r\n    //     // TODO: somehow make this asynchronous so we can refresh the token if necessary?\r\n    //     if (this.checkTokenExpiration()) {\r\n    //         headers.append('x-access-token', this.getToken());\r\n    //     }\r\n    //     return headers;\r\n    // }\r\n\r\n    // getAuthorizationHeader (): Object {\r\n    //     return { headers: this.appendAuthorizationHeader(new Headers()) };\r\n    // }\r\n\r\n    logout(): Promise<boolean> {\r\n        return this.http.post(this.logoutUrl, {})\r\n            .toPromise()\r\n            .then(() => {\r\n                this.http.setToken(null, 0);\r\n                // this.token = null;\r\n                this.loggedInUser = null;\r\n\r\n                this.announceLoginState();\r\n                return true;\r\n            });\r\n    }\r\n\r\n    isLoggedIn(): boolean {\r\n        return this.loggedInUser && true;\r\n    }\r\n\r\n    // private getToken(): string {\r\n    //     return this.token;\r\n    // }\r\n\r\n    getLoggedInUser(): User {\r\n        if (this.checkTokenExpiration()) {\r\n            return this.loggedInUser;\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Change information on the current user\r\n     */\r\n    updateUser(user: User): Promise<User> {\r\n        return this.http.put(this.userUrl + this.loggedInUser._id, user)\r\n            .toPromise()\r\n            .then((response) => {\r\n                this.loggedInUser = response.json() as User;\r\n                return this.loggedInUser;\r\n            });\r\n    }\r\n\r\n    setPreference(key: string, val: string): Promise<User> {\r\n        return this.http.post(this.userUrl + this.loggedInUser._id + '/preference', {\r\n            key: key,\r\n            val: val\r\n        }).toPromise()\r\n            .then((response) => {\r\n                this.loggedInUser = response.json() as User;\r\n                return this.loggedInUser;\r\n            });\r\n    }\r\n\r\n    getPreference(key: string): string {\r\n        let value: string = '';\r\n\r\n        if (this.loggedInUser.preferences) {\r\n            this.loggedInUser.preferences.forEach(pref => {\r\n                if (pref.key == key) {\r\n                    value = pref.value;\r\n                }\r\n            });\r\n        }\r\n\r\n        return value;\r\n    }\r\n\r\n    can (key: string): boolean {\r\n        if (!this.loggedInUser || !this.loggedInUser.actions.length) {\r\n            return false;\r\n        } else {\r\n            return this.loggedInUser.actions.indexOf(key) > -1;\r\n        }\r\n    }\r\n\r\n    isSuperAdmin(): boolean {\r\n        return this.loggedInUser && this.loggedInUser.superAdmin;\r\n    }\r\n\r\n    validate (user: User): Promise<String> {\r\n        return this.http.post(this.validateUrl, user)\r\n            .toPromise()\r\n            .then((response) => {\r\n                let data = response.json();\r\n                if (data.conflict) {\r\n                    return data.conflict;\r\n                } else {\r\n                    return '';\r\n                }\r\n            })\r\n    }\r\n\r\n}"]}