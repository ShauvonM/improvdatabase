{"version":3,"sources":["../../src/ts/service/auth-guard.service.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA,sCAA2C;AAC3C,0CAAoH;AAKpH,wDAAsD;AAGtD,IAAa,SAAS;IAIlB,mBACY,MAAc,EACd,WAAwB;QADxB,WAAM,GAAN,MAAM,CAAQ;QACd,gBAAW,GAAX,WAAW,CAAa;IACjC,CAAC;IAEJ,oCAAgB,GAAhB,UAAkB,KAA6B,EAAE,KAA0B;QACvE,kDAAkD;QAElD,EAAE,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,eAAe,EAAE,CAAC,CAAC,CAAC;YACrC,IAAI,IAAI,GAAO,KAAK,CAAC,IAAI,CAAC;YAC1B,uDAAuD;YACvD,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,IAAI,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;gBACpD,MAAM,CAAC,IAAI,CAAC;YAChB,CAAC;YAAC,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,oBAAoB,CAAC,CAAC,CAAC,CAAC;gBACpD,gCAAgC;gBAChC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,mBAAmB,CAAC,EAAE,EAAE,UAAU,EAAE,IAAI,EAAE,CAAC,CAAC;YACtE,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,mBAAmB,CAAC,EAAE,EAAE,UAAU,EAAE,IAAI,EAAE,CAAC,CAAC;YACtE,CAAC;QACL,CAAC;QAAC,IAAI,CAAC,CAAC;YACJ,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC,GAAG,CAAC;YAC1B,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,QAAQ,CAAC,EAAE,EAAE,UAAU,EAAE,IAAI,EAAE,CAAC,CAAC;QAC3D,CAAC;QACD,MAAM,CAAC,KAAK,CAAC;IACjB,CAAC;IACL,gBAAC;AAAD,CA7BA,AA6BC,IAAA;AA7BY,SAAS;IADrB,iBAAU,EAAE;qCAMW,eAAM;QACD,0BAAW;GAN3B,SAAS,CA6BrB;AA7BY,8BAAS","file":"auth-guard.service.js","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { CanActivateChild, Router, ActivatedRouteSnapshot, RouterStateSnapshot, UrlSegment } from '@angular/router';\r\n\r\nimport { AppComponent } from '../component/app.component';\r\n\r\nimport { User } from \"../model/user\";\r\nimport { UserService } from '../service/user.service';\r\n\r\n@Injectable() \r\nexport class AuthGuard implements CanActivateChild {\r\n\r\n    redirect: UrlSegment[];\r\n\r\n    constructor(\r\n        private router: Router,\r\n        private userService: UserService\r\n    ) {}\r\n\r\n    canActivateChild (route: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean {\r\n        //console.log(this.userService.getLoggedInUser());\r\n\r\n        if (this.userService.getLoggedInUser()) {\r\n            let data:any = route.data;\r\n            //console.log(data, this.userService.can(data.action));\r\n            if (!data.action || this.userService.can(data.action)) {\r\n                return true;\r\n            } else if (this.userService.can('subscription_renew')) {\r\n                // their subscription is expired\r\n                this.router.navigate(['/app/unauthorized'], { replaceUrl: true });\r\n            } else {\r\n                this.router.navigate(['/app/unauthorized'], { replaceUrl: true });\r\n            }\r\n        } else {\r\n            this.redirect = route.url;\r\n            this.router.navigate(['/login'], { replaceUrl: true });\r\n        }\r\n        return false;\r\n    }\r\n}"]}