{"version":3,"sources":["../../src/ts/service/game-database.service.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA,sCAA2C;AAC3C,sCAA8C;AAE9C,uCAAqC;AAUrC,+CAA6C;AAG7C,IAAa,mBAAmB;IAsB5B,6BACY,IAAU,EACV,WAAwB;QADxB,SAAI,GAAJ,IAAI,CAAM;QACV,gBAAW,GAAX,WAAW,CAAa;QAvB5B,aAAQ,GAAG,WAAW,CAAC;QACvB,aAAQ,GAAG,WAAW,CAAC;QAEvB,gBAAW,GAAG,eAAe,CAAC;QAC9B,mBAAc,GAAG,2BAA2B,CAAC;QAC7C,gBAAW,GAAG,wBAAwB,CAAC;QAEvC,WAAM,GAAG,UAAU,CAAC;QAEpB,YAAO,GAAG,WAAW,CAAC;QAE9B,uBAAuB;QACf,UAAK,GAAW,EAAE,CAAC;QACnB,UAAK,GAAW,EAAE,CAAC;QACnB,iBAAY,GAAmB,EAAE,CAAC;QAClC,cAAS,GAAmB,EAAE,CAAC;QAC/B,SAAI,GAAU,EAAE,CAAC;QACjB,UAAK,GAAW,EAAE,CAAC;IAOnB,CAAC;IAGT,sCAAQ,GAAR;QAAA,iBAYC;QAXG,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC;YACrB,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,WAAW,CAAC,sBAAsB,EAAE,CAAC;iBACtF,SAAS,EAAE;iBACX,IAAI,CAAC,UAAA,QAAQ;gBACV,KAAI,CAAC,KAAK,GAAG,QAAQ,CAAC,IAAI,EAAY,CAAC;gBACvC,KAAI,CAAC,UAAU,EAAE,CAAC;gBAClB,MAAM,CAAC,KAAI,CAAC,KAAK,CAAC;YACtB,CAAC,CAAC;iBACD,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QACjC,CAAC;QACD,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC;IAC7B,CAAC;IAED,qCAAO,GAAP,UAAQ,EAAU;QACd,IAAI,YAAkB,CAAC;QACvB,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;YACxB,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,UAAC,IAAI;gBACpB,EAAE,CAAC,CAAC,IAAI,CAAC,GAAG,KAAK,EAAE,CAAC,CAAC,CAAC;oBAClB,YAAY,GAAG,IAAI,CAAC;gBACxB,CAAC;YACL,CAAC,CAAC,CAAA;QACN,CAAC;QAED,EAAE,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC;YACf,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC;QACzC,CAAC;QAAC,IAAI,CAAC,CAAC;YACJ,mEAAmE;YACnE,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,GAAG,GAAG,GAAG,EAAE,EAAE,IAAI,CAAC,WAAW,CAAC,sBAAsB,EAAE,CAAC;iBACpF,SAAS,EAAE;iBACX,IAAI,CAAC,UAAA,QAAQ;gBACV,MAAM,CAAC,QAAQ,CAAC,IAAI,EAAU,CAAC;YACnC,CAAC,CAAC;iBACD,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QACjC,CAAC;IACL,CAAC;IAEO,wCAAU,GAAlB;QACI,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,UAAC,EAAE,EAAE,EAAE;YACnB,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC;gBACnB,MAAM,CAAC,CAAC,CAAC,CAAC;YACd,CAAC;YACD,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC;gBACnB,MAAM,CAAC,CAAC,CAAC;YACb,CAAC;YAED,MAAM,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;QAC5D,CAAC,CAAC,CAAC;QACH,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC;IACtB,CAAC;IAGD,sCAAQ,GAAR;QAAA,iBAWC;QAVG,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC;YACrB,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,WAAW,CAAC,sBAAsB,EAAE,CAAC;iBACtF,SAAS,EAAE;iBACX,IAAI,CAAC,UAAA,QAAQ;gBACV,KAAI,CAAC,KAAK,GAAG,QAAQ,CAAC,IAAI,EAAY,CAAC;gBACvC,MAAM,CAAC,KAAI,CAAC,KAAK,CAAC;YACtB,CAAC,CAAC;iBACD,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QACjC,CAAC;QACD,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC;IAC7B,CAAC;IAED;;OAEG;IACK,+CAAiB,GAAzB,UAA0B,KAAY,EAAE,EAAU;QAC9C,IAAI,WAAW,GAAG,EAAE,CAAC;QACrB,KAAK,CAAC,OAAO,CAAC,UAAA,IAAI;YACd,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,EAAE,CAAC,CAAC,CAAC;gBAC/B,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAC3B,CAAC;YAAC,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;gBACnD,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAC3B,CAAC;QACL,CAAC,CAAC,CAAC;QACH,MAAM,CAAC,WAAW,CAAC;IACvB,CAAC;IAED;;OAEG;IACH,yCAAyC;IACzC,kEAAkE;IAClE,+BAA+B;IAC/B,4CAA4C;IAC5C,4BAA4B;IAC5B,iEAAiE;IACjE,mBAAmB;IACnB,2BAA2B;IAC3B,YAAY;IACZ,UAAU;IACV,oBAAoB;IACpB,IAAI;IAEJ;;OAEG;IACH,wCAAU,GAAV,UAAW,MAAc,EAAE,IAAY;QAAvC,iBAYC;QAXG,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE;YACjC,IAAI,EAAE,MAAM;YACZ,IAAI,EAAE,IAAI;SACb,EAAE,IAAI,CAAC,WAAW,CAAC,sBAAsB,EAAE,CAAC;aACxC,SAAS,EAAE;aACX,IAAI,CAAC,UAAA,QAAQ;YACV,IAAI,IAAI,GAAG,QAAQ,CAAC,IAAI,EAAU,CAAC;YACnC,KAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACtB,MAAM,CAAC,IAAI,CAAC;QAChB,CAAC,CAAC;aACD,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IACjC,CAAC;IAED;;OAEG;IACH,sCAAQ,GAAR,UAAS,IAAU;QAAnB,iBAeC;QAdG,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,GAAG,GAAG,GAAG,IAAI,CAAC,GAAG,EAC/C,IAAI,EAAE,IAAI,CAAC,WAAW,CAAC,sBAAsB,EAAE,CAAC;aAC/C,SAAS,EAAE;aACX,IAAI,CAAC,UAAA,QAAQ;YACV,IAAI,OAAO,GAAG,QAAQ,CAAC,IAAI,EAAU,CAAC;YACtC,IAAI,KAAK,GAAG,KAAI,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;YACrC,EAAE,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;gBACb,KAAI,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,EAAE,OAAO,CAAC,CAAC;YACzC,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,KAAI,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;YAC7B,CAAC;YACD,KAAI,CAAC,UAAU,EAAE,CAAC;YAClB,MAAM,CAAC,OAAO,CAAC;QACnB,CAAC,CAAC,CAAA;IACV,CAAC;IAyBD,6CAAe,GAAf;QAAA,iBAWC;QAVG,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC,CAAC;YAC5B,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,cAAc,EAAE,IAAI,CAAC,WAAW,CAAC,sBAAsB,EAAE,CAAC;iBACnG,SAAS,EAAE;iBACX,IAAI,CAAC,UAAA,QAAQ;gBACV,KAAI,CAAC,YAAY,GAAG,QAAQ,CAAC,IAAI,EAAoB,CAAC;gBACtD,MAAM,CAAC,KAAI,CAAC,YAAY,CAAC;YAC7B,CAAC,CAAC;iBACD,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QACjC,CAAC;QACD,MAAM,CAAC,IAAI,CAAC,mBAAmB,CAAC;IACpC,CAAC;IAED,gDAAkB,GAAlB,UAAmB,EAAU;QAA7B,iBAUC;QATG,MAAM,CAAC,IAAI,OAAO,CAAe,UAAC,OAAO,EAAE,MAAM;YAC7C,KAAI,CAAC,eAAe,EAAE,CAAC,IAAI,CAAC,UAAC,YAAY;gBACrC,YAAY,CAAC,OAAO,CAAC,UAAC,WAAW;oBAC7B,EAAE,CAAC,CAAC,WAAW,CAAC,GAAG,IAAI,EAAE,CAAC,CAAC,CAAC;wBACxB,OAAO,CAAC,WAAW,CAAC,CAAC;oBACzB,CAAC;gBACL,CAAC,CAAC,CAAC;YACP,CAAC,CAAC,CAAA;QACN,CAAC,CAAC,CAAC;IACP,CAAC;IAED,+CAAiB,GAAjB,UAAkB,IAAY,EAAE,GAAW,EAAE,GAAW,EAAE,WAAmB;QAA7E,iBAeC;QAdG,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,EAClC;YACI,IAAI,EAAE,IAAI;YACV,GAAG,EAAE,GAAG;YACR,GAAG,EAAE,GAAG;YACR,IAAI,EAAE,aAAa;YACnB,WAAW,EAAE,WAAW;SAC3B,EAAE,IAAI,CAAC,WAAW,CAAC,sBAAsB,EAAE,CAAC;aAC5C,SAAS,EAAE;aACX,IAAI,CAAC,UAAC,QAAQ;YACX,IAAI,WAAW,GAAG,QAAQ,CAAC,IAAI,EAAkB,CAAC;YAClD,KAAI,CAAC,YAAY,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;YACpC,MAAM,CAAC,WAAW,CAAC;QACvB,CAAC,CAAC,CAAC;IACX,CAAC;IAGD,0CAAY,GAAZ;QAAA,iBAWC;QAVG,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC;YACzB,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC,WAAW,CAAC,sBAAsB,EAAE,CAAC;iBAC7F,SAAS,EAAE;iBACX,IAAI,CAAC,UAAA,QAAQ;gBACV,KAAI,CAAC,SAAS,GAAG,QAAQ,CAAC,IAAI,EAAoB,CAAC;gBACnD,MAAM,CAAC,KAAI,CAAC,SAAS,CAAC;YAC1B,CAAC,CAAC;iBACD,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QACjC,CAAC;QACD,MAAM,CAAC,IAAI,CAAC,gBAAgB,CAAC;IACjC,CAAC;IAED,6CAAe,GAAf,UAAgB,EAAU;QAA1B,iBAUC;QATG,MAAM,CAAC,IAAI,OAAO,CAAe,UAAC,OAAO,EAAE,MAAM;YAC7C,KAAI,CAAC,YAAY,EAAE,CAAC,IAAI,CAAC,UAAC,SAAS;gBAC/B,SAAS,CAAC,OAAO,CAAC,UAAC,QAAQ;oBACvB,EAAE,CAAC,CAAC,QAAQ,CAAC,GAAG,IAAI,EAAE,CAAC,CAAC,CAAC;wBACrB,OAAO,CAAC,QAAQ,CAAC,CAAC;oBACtB,CAAC;gBACL,CAAC,CAAC,CAAC;YACP,CAAC,CAAC,CAAA;QACN,CAAC,CAAC,CAAC;IACP,CAAC;IAED,4CAAc,GAAd,UAAe,IAAY,EAAE,GAAW,EAAE,GAAW,EAAE,WAAmB;QAA1E,iBAeC;QAdG,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,EAClC;YACI,IAAI,EAAE,IAAI;YACV,GAAG,EAAE,GAAG;YACR,GAAG,EAAE,GAAG;YACR,IAAI,EAAE,UAAU;YAChB,WAAW,EAAE,WAAW;SAC3B,EAAE,IAAI,CAAC,WAAW,CAAC,sBAAsB,EAAE,CAAC;aAC5C,SAAS,EAAE;aACX,IAAI,CAAC,UAAC,QAAQ;YACX,IAAI,QAAQ,GAAG,QAAQ,CAAC,IAAI,EAAkB,CAAC;YAC/C,KAAI,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YAC9B,MAAM,CAAC,QAAQ,CAAC;QACpB,CAAC,CAAC,CAAC;IACX,CAAC;IAGD,qCAAO,GAAP;QAAA,iBAiBC;QAhBG,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;YACpB,EAAE,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;gBACnC,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,WAAW,CAAC,sBAAsB,EAAE,CAAC;qBACnF,SAAS,EAAE;qBACX,IAAI,CAAC,UAAA,QAAQ;oBACV,KAAI,CAAC,IAAI,GAAG,QAAQ,CAAC,IAAI,EAAW,CAAC;oBACrC,MAAM,CAAC,KAAI,CAAC,IAAI,CAAC;gBACrB,CAAC,CAAC;qBACD,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;YACjC,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,IAAI,CAAC,WAAW,GAAG,IAAI,OAAO,CAAQ,UAAC,OAAO,EAAE,MAAM;oBAClD,OAAO,CAAC,EAAE,CAAC,CAAC;gBAChB,CAAC,CAAC,CAAC;YACP,CAAC;QACL,CAAC;QACD,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC;IAC5B,CAAC;IAED,wCAAU,GAAV,UAAW,EAAU;QAArB,iBAUC;QATG,MAAM,CAAC,IAAI,OAAO,CAAM,UAAC,OAAO,EAAE,MAAM;YACpC,KAAI,CAAC,OAAO,EAAE,CAAC,IAAI,CAAC,UAAC,IAAI;gBACrB,IAAI,CAAC,OAAO,CAAC,UAAC,GAAG;oBACb,EAAE,CAAC,CAAC,GAAG,CAAC,GAAG,IAAI,EAAE,CAAC,CAAC,CAAC;wBAChB,OAAO,CAAC,GAAG,CAAC,CAAC;oBACjB,CAAC;gBACL,CAAC,CAAC,CAAC;YACP,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;IACP,CAAC;IAED,wCAAU,GAAV,UAAW,IAAU,EAAE,MAAgB;QACnC,IAAI,YAAY,GAAY,KAAK,CAAC;QAClC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,UAAC,OAAO;YACtB,EAAE,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;gBACnC,YAAY,GAAG,IAAI,CAAC;gBACpB,MAAM,CAAC,KAAK,CAAC;YACjB,CAAC;QACL,CAAC,CAAC,CAAC;QACH,MAAM,CAAC,YAAY,CAAC;IACxB,CAAC;IAGD,sCAAQ,GAAR;QAAA,iBAiBC;QAhBG,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC;YACrB,EAAE,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,kBAAkB,CAAC,CAAC,CAAC,CAAC;gBAC3C,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,WAAW,CAAC,sBAAsB,EAAE,CAAC;qBACrF,SAAS,EAAE;qBACX,IAAI,CAAC,UAAA,QAAQ;oBACV,KAAI,CAAC,KAAK,GAAG,QAAQ,CAAC,IAAI,EAAY,CAAC;oBACvC,MAAM,CAAC,KAAI,CAAC,KAAK,CAAC;gBACtB,CAAC,CAAC;qBACD,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;YACjC,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,IAAI,CAAC,YAAY,GAAG,IAAI,OAAO,CAAS,UAAC,OAAO,EAAE,MAAM;oBACpD,OAAO,CAAC,EAAE,CAAC,CAAC;gBAChB,CAAC,CAAC,CAAA;YACN,CAAC;QACL,CAAC;QACD,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC;IAC7B,CAAC;IAED,6CAAe,GAAf,UAAgB,IAAU;QAA1B,iBAoBC;QAnBG,MAAM,CAAC,IAAI,OAAO,CAAS,UAAC,OAAO,EAAE,MAAM;YACvC,KAAI,CAAC,QAAQ,EAAE,CAAC,IAAI,CAAC,UAAC,KAAK;gBACvB,oCAAoC;gBACpC,IAAI,YAAY,GAAW,EAAE,CAAC;gBAC9B,KAAK,CAAC,OAAO,CAAC,UAAC,IAAI;oBACf,EAAE,CAAC,CACC,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,GAAG;2BAClB,CAAC,IAAI,CAAC,WAAW,CAAC,GAAG,IAAI,IAAI,CAAC,QAAQ;4BACrC,IAAI,CAAC,QAAQ,CAAC,GAAG,IAAI,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC;2BAC3C,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,IAAI,IAAI,CAAC,QAAQ;4BAClC,IAAI,CAAC,QAAQ,CAAC,GAAG,IAAI,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC;2BACxC,CAAC,IAAI,CAAC,GAAG,IAAI,KAAI,CAAC,UAAU,CAAC,IAAI,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CACzD,CAAC,CAAC,CAAC;wBACC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;oBAC5B,CAAC;gBACL,CAAC,CAAC,CAAC;gBACH,OAAO,CAAC,YAAY,CAAC,CAAC;YAC1B,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;IACP,CAAC;IAED,wCAAU,GAAV,UAAW,IAAU;QAArB,iBAQC;QAPG,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,GAAG,GAAG,GAAG,IAAI,CAAC,GAAG,EAClD,IAAI,CAAC,WAAW,CAAC,sBAAsB,EAAE,CAAC;aACzC,SAAS,EAAE;aACX,IAAI,CAAC,UAAC,QAAQ;YACX,KAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,CAAC;YAChC,MAAM,CAAC,IAAI,CAAC;QAChB,CAAC,CAAC,CAAA;IACV,CAAC;IAEO,kDAAoB,GAA5B,UAA6B,IAAU;QACnC,IAAI,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QACrC,EAAE,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;YACb,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;QAChC,CAAC;QACD,MAAM,CAAC,KAAK,CAAC;IACjB,CAAC;IAEO,4CAAc,GAAtB,UAAuB,IAAU,EAAE,QAAQ;QACvC,IAAI,KAAK,GAAG,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,CAAC;QAC5C,IAAI,OAAO,GAAG,QAAQ,CAAC,IAAI,EAAU,CAAC;QACtC,EAAE,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;YACb,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,EAAE,OAAO,CAAC,CAAC;QACzC,CAAC;QAAC,IAAI,CAAC,CAAC;YACJ,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QAC7B,CAAC;QACD,MAAM,CAAC,OAAO,CAAC;IACnB,CAAC;IAED,sCAAQ,GAAR,UAAS,IAAU;QAAnB,iBASC;QARG,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,GAAG,GAAG,GAAG,IAAI,CAAC,GAAG,EAC/C,IAAI,EACJ,IAAI,CAAC,WAAW,CAAC,sBAAsB,EAAE,CAAC;aACzC,SAAS,EAAE;aACX,IAAI,CAAC,UAAC,QAAQ;YACX,MAAM,CAAC,KAAI,CAAC,cAAc,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;QAC/C,CAAC,CAAC;aACD,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IACjC,CAAC;IAED,wCAAU,GAAV;QAAA,iBAWC;QAVG,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,EAC/B,EAAE,EAAE,IAAI,CAAC,WAAW,CAAC,sBAAsB,EAAE,CAAC;aAC7C,SAAS,EAAE;aACX,IAAI,CAAC,UAAC,QAAQ;YACX,IAAI,IAAI,GAAG,QAAQ,CAAC,IAAI,EAAU,CAAC;YACnC,KAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACtB,KAAI,CAAC,UAAU,EAAE,CAAC;YAClB,MAAM,CAAC,IAAI,CAAC;QAChB,CAAC,CAAC;aACD,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IACjC,CAAC;IAEO,+CAAiB,GAAzB,UAA0B,IAAU,EAAE,QAAQ,EAAE,GAAe;QAC3D,IAAI,OAAO,GAAG,IAAI,CAAC,cAAc,CAAC,IAAI,EAAE,QAAQ,CAAC,EAC7C,OAAgB,CAAC;QAErB,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,UAAA,EAAE;YACnB,EAAE,CAAC,CAAC,CAAC,OAAM,CAAC,GAAG,CAAC,IAAI,QAAQ,IAAI,EAAE,CAAC,GAAG,CAAC,GAAG,IAAI,GAAG,CAAC,GAAG,CAAC;gBAClD,CAAC,OAAM,CAAC,GAAG,CAAC,IAAI,QAAQ,IAAI,EAAE,CAAC,GAAG,CAAC,IAAI,IAAI,GAAG,CAAC,CAAC,CAAC,CAAC;gBAClD,OAAO,GAAG,EAAE,CAAC;gBACb,MAAM,CAAC,KAAK,CAAC;YACjB,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,MAAM,CAAC,OAAO,CAAC;IACnB,CAAC;IAED,2CAAa,GAAb,UAAc,IAAU,EAAE,GAAQ;QAAlC,iBAOC;QANG,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,GAAG,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,UAAU,GAAG,GAAG,CAAC,GAAG,EAAE,EAAE,EAC3E,IAAI,CAAC,WAAW,CAAC,sBAAsB,EAAE,CAAC;aACzC,SAAS,EAAE;aACX,IAAI,CAAC,UAAA,QAAQ;YACV,MAAM,CAAC,KAAI,CAAC,iBAAiB,CAAC,IAAI,EAAE,QAAQ,EAAE,GAAG,CAAC,CAAC;QACvD,CAAC,CAAC,CAAA;IACV,CAAC;IAED,2CAAa,GAAb,UAAc,IAAU,EAAE,OAAgB;QAA1C,iBAOC;QANG,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,GAAG,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,aAAa,GAAG,OAAO,CAAC,GAAG,CAAC,GAAG,EACpF,IAAI,CAAC,WAAW,CAAC,sBAAsB,EAAE,CAAC;aACzC,SAAS,EAAE;aACX,IAAI,CAAC,UAAA,QAAQ;YACV,MAAM,CAAC,KAAI,CAAC,cAAc,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;QAC/C,CAAC,CAAC,CAAA;IACV,CAAC;IAED,uCAAS,GAAT,UAAU,IAAY,EAAE,IAAU;QAAlC,iBAQC;QAPG,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,GAAG,GAAG,GAAG,IAAI,CAAC,GAAG,GAAG,aAAa,GAAG,IAAI,EACvE,EAAE,IAAI,EAAE,IAAI,EAAE,EACd,IAAI,CAAC,WAAW,CAAC,sBAAsB,EAAE,CAAC;aACzC,SAAS,EAAE;aACX,IAAI,CAAC,UAAA,QAAQ;YACV,MAAM,CAAC,KAAI,CAAC,iBAAiB,CAAC,IAAI,EAAE,QAAQ,EAAE,IAAI,CAAC,CAAC;QACxD,CAAC,CAAC,CAAC;IACX,CAAC;IAEO,yCAAW,GAAnB,UAAoB,KAAU;QAC1B,OAAO,CAAC,KAAK,CAAC,uBAAuB,EAAE,KAAK,CAAC,CAAC;QAE9C,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,IAAI,KAAK,CAAC,CAAC;IAClD,CAAC;IAED,kDAAkD;IAE1C,0CAAY,GAApB,UAAqB,GAAU,EAAE,IAAY,EAAE,UAAkB,EAAE,IAAY;QAC3E,IAAI,OAAO,GAAmB,EAAE,CAAC;QACjC,GAAG,CAAC,OAAO,CAAC,UAAC,IAAI;YACb,IAAI,GAAG,GAAG,IAAI,CAAC,IAAI,CAAC;YAEpB,EAAE,CAAC,CAAC,GAAG,CAAC,WAAW,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;gBACvC,IAAI,KAAK,GAAG,IAAI,MAAM,CAAC,GAAG,GAAG,IAAI,GAAG,GAAG,EAAE,IAAI,CAAC,CAAC;gBAC/C,GAAG,GAAG,GAAG,CAAC,OAAO,CAAC,KAAK,EAAE,qBAAqB,CAAC,CAAC;gBAEhD,IAAI,MAAM,GAAiB;oBACvB,IAAI,EAAE,GAAG;oBACT,EAAE,EAAE,IAAI,CAAC,UAAU,CAAC;oBACpB,IAAI,EAAE,IAAI;iBACb,CAAA;gBACD,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YACzB,CAAC;QACL,CAAC,CAAC,CAAC;QACH,MAAM,CAAC,OAAO,CAAC;IACnB,CAAC;IACO,gDAAkB,GAA1B,UAA2B,OAAuB;QAC9C,OAAO,CAAC,IAAI,CAAC,UAAC,EAAE,EAAE,EAAE;YAChB,IAAI,IAAI,GAAG,EAAE,CAAC,IAAI,CAAC;YACnB,IAAI,IAAI,GAAG,EAAE,CAAC,IAAI,CAAC;YACnB,EAAE,CAAC,CAAC,IAAI,GAAG,IAAI,CAAC,CAAC,CAAC;gBACd,MAAM,CAAC,CAAC,CAAC;YACb,CAAC;YACD,EAAE,CAAC,CAAC,IAAI,GAAG,IAAI,CAAC,CAAC,CAAC;gBACd,MAAM,CAAC,CAAC,CAAC,CAAC;YACd,CAAC;YACD,MAAM,CAAC,CAAC,CAAC;QACb,CAAC,CAAC,CAAC;QACH,MAAM,CAAC,OAAO,CAAC;IACnB,CAAC;IAED,8CAAgB,GAAhB,UAAiB,IAAY;QAA7B,iBA0BC;QAzBG,MAAM,CAAC,IAAI,OAAO,CAAiB,UAAC,OAAO,EAAE,MAAM;YAC/C,IAAI,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC;YAC1B,IAAI,aAAa,GAAmB,EAAE,CAAC;YACvC,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;gBACP,OAAO,CAAC,GAAG,CAAC;oBACR,KAAI,CAAC,QAAQ,EAAE;oBACf,KAAI,CAAC,OAAO,EAAE;oBACd,KAAI,CAAC,YAAY,EAAE;oBACnB,KAAI,CAAC,eAAe,EAAE;iBACzB,CAAC;qBACG,IAAI,CAAC,UAAC,KAAK;oBACR,aAAa,GAAG,EAAE;yBACb,MAAM,CAAC,KAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,MAAM,EAAE,MAAM,EAAE,IAAI,CAAC,CAAC;yBACzD,MAAM,CAAC,KAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,KAAK,EAAE,KAAK,EAAE,IAAI,CAAC,CAAC;yBACvD,MAAM,CAAC,KAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,UAAU,EAAE,KAAK,EAAE,IAAI,CAAC,CAAC;yBAC5D,MAAM,CAAC,KAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,aAAa,EAAE,KAAK,EAAE,IAAI,CAAC,CAAC,CAAC;oBAErE,qFAAqF;oBAErF,aAAa,GAAG,KAAI,CAAC,kBAAkB,CAAC,aAAa,CAAC,CAAC;oBAEvD,OAAO,CAAC,aAAa,CAAC,CAAC;gBAC3B,CAAC,CAAC,CAAC;YACX,CAAC;QACL,CAAC,CAAC,CAAC;IACP,CAAC;IAED,2CAAa,GAAb,UAAc,IAAY;QAA1B,iBAeC;QAdG,MAAM,CAAC,IAAI,OAAO,CAAQ,UAAC,OAAO,EAAE,MAAM;YACtC,IAAI,GAAG,IAAI,CAAC,iBAAiB,EAAE,CAAC;YAChC,IAAI,YAAY,GAAU,EAAE,CAAC;YAC7B,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;gBACP,KAAI,CAAC,OAAO,EAAE,CAAC,IAAI,CAAC,UAAA,IAAI;oBACpB,IAAI,CAAC,OAAO,CAAC,UAAA,GAAG;wBACZ,EAAE,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,iBAAiB,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;4BAClD,YAAY,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;wBAC3B,CAAC;oBACL,CAAC,CAAC,CAAC;oBACH,OAAO,CAAC,YAAY,CAAC,CAAC;gBAC1B,CAAC,CAAC,CAAC;YACP,CAAC;QACL,CAAC,CAAC,CAAA;IACN,CAAC;IAED,4CAAc,GAAd,UAAe,IAAY;QAA3B,iBA2DC;QA1DG,MAAM,CAAC,IAAI,OAAO,CAAS,UAAC,OAAO,EAAE,MAAM;YACvC,IAAI,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC;YAC1B,IAAI,WAAW,GAAW,EAAE,CAAC;YAC7B,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;gBACP,OAAO,CAAC,GAAG,CAAC;oBACR,KAAI,CAAC,QAAQ,EAAE;oBACf,KAAI,CAAC,OAAO,EAAE;oBACd,KAAI,CAAC,YAAY,EAAE;oBACnB,KAAI,CAAC,eAAe,EAAE;iBACzB,CAAC;qBACG,IAAI,CAAC,UAAC,KAAK;oBAER,kBAAkB;oBAClB,IAAI,UAAU,GAAa,EAAE,CAAC;oBAC9B,KAAK,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,UAAC,GAAG;wBACjB,EAAE,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;4BAC5C,UAAU,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;wBAC7B,CAAC;oBACL,CAAC,CAAC,CAAC;oBAEH,uBAAuB;oBACvB,IAAI,eAAe,GAAa,EAAE,CAAC;oBACnC,KAAK,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,UAAC,QAAQ;wBACtB,EAAE,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;4BACjD,eAAe,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;wBACvC,CAAC;oBACL,CAAC,CAAC,CAAC;oBAEH,2BAA2B;oBAC3B,IAAI,kBAAkB,GAAa,EAAE,CAAC;oBACtC,KAAK,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,UAAC,WAAW;wBACzB,EAAE,CAAC,CAAC,WAAW,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;4BACpD,kBAAkB,CAAC,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;wBAC7C,CAAC;oBACL,CAAC,CAAC,CAAC;oBAEH,yBAAyB;oBACzB,KAAK,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,UAAC,IAAI;wBAClB,oEAAoE;wBACpE,EAAE,CAAC,CAAC,KAAI,CAAC,UAAU,CAAC,IAAI,EAAE,UAAU,CAAC;4BAC7B,eAAe,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC;4BAC3C,kBAAkB,CAAC,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,GAAG,CAAE,CAAC,CAAC,CAAC;4BACzD,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;wBAC3B,CAAC;wBAAC,IAAI,CAAC,CAAC;4BACJ,2BAA2B;4BAC3B,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,UAAC,IAAI;gCACpB,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;oCACtC,WAAW,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;oCACtC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;gCAC3B,CAAC;4BACL,CAAC,CAAC,CAAC;wBACP,CAAC;oBACL,CAAC,CAAC,CAAC;oBAEH,OAAO,CAAC,WAAW,CAAC,CAAC;gBACzB,CAAC,CAAC,CAAC;YACX,CAAC;QACL,CAAC,CAAC,CAAC;IACP,CAAC;IACL,0BAAC;AAAD,CArlBA,AAqlBC,IAAA;AArlBY,mBAAmB;IAD/B,iBAAU,EAAE;qCAwBS,WAAI;QACG,0BAAW;GAxB3B,mBAAmB,CAqlB/B;AArlBY,kDAAmB","file":"game-database.service.js","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Headers, Http } from '@angular/http';\r\n\r\nimport 'rxjs/add/operator/toPromise';\r\n\r\nimport { Name } from '../model/name';\r\nimport { Game, TagGame } from '../model/game';\r\nimport { GameMetadata } from '../model/game-metadata';\r\nimport { Tag } from '../model/tag';\r\nimport { Note } from '../model/note';\r\n\r\nimport { SearchResult } from '../app/view/toolbar.view';\r\n\r\nimport { UserService } from './user.service';\r\n\r\n@Injectable()\r\nexport class GameDatabaseService {\r\n    private gamesUrl = '/api/game';\r\n    private namesUrl = '/api/name';\r\n\r\n    private metadataUrl = '/api/metadata';\r\n    private playerCountUrl = '/api/metadata/playerCount';\r\n    private durationUrl = '/api/metadata/duration';\r\n\r\n    private tagUrl = '/api/tag';\r\n\r\n    private noteUrl = '/api/note';\r\n\r\n    // cache all the things\r\n    private games: Game[] = [];\r\n    private names: Name[] = [];\r\n    private playercounts: GameMetadata[] = [];\r\n    private durations: GameMetadata[] = [];\r\n    private tags: Tag[] = [];\r\n    private notes: Note[] = [];\r\n\r\n    private sortProperty: string;\r\n\r\n    constructor(\r\n        private http: Http,\r\n        private userService: UserService\r\n        ) { }\r\n\r\n    private _gamePromise: Promise<Game[]>;\r\n    getGames(): Promise<Game[]> {\r\n        if (!this._gamePromise) {\r\n            this._gamePromise = this.http.get(this.gamesUrl, this.userService.getAuthorizationHeader())\r\n                .toPromise()\r\n                .then(response => {\r\n                    this.games = response.json() as Game[];\r\n                    this._sortGames();\r\n                    return this.games;\r\n                })\r\n                .catch(this.handleError);\r\n        } \r\n        return this._gamePromise;\r\n    }\r\n\r\n    getGame(id: String): Promise<Game> {\r\n        let gameToReturn: Game;\r\n        if (this.games.length > 0) {\r\n            this.games.forEach((game) => {\r\n                if (game._id === id) {\r\n                    gameToReturn = game;\r\n                }\r\n            })\r\n        }\r\n\r\n        if (gameToReturn) {\r\n            return Promise.resolve(gameToReturn);\r\n        } else {\r\n            // either no games are loaded or we couldn't find the specified one\r\n            return this.http.get(this.gamesUrl + '/' + id, this.userService.getAuthorizationHeader())\r\n                .toPromise()\r\n                .then(response => {\r\n                    return response.json() as Game;\r\n                })\r\n                .catch(this.handleError);\r\n        }\r\n    }\r\n\r\n    private _sortGames(): Game[] {\r\n        this.games.sort((g1, g2) => {\r\n            if (!g1.names.length) {\r\n                return -1;\r\n            }\r\n            if (!g2.names.length) {\r\n                return 1;\r\n            }\r\n\r\n            return g1.names[0].name.localeCompare(g2.names[0].name);\r\n        });\r\n        return this.games;\r\n    }\r\n\r\n    private _namePromise: Promise<Name[]>;\r\n    getNames(): Promise<Name[]> {\r\n        if (!this._namePromise) {\r\n            this._namePromise = this.http.get(this.namesUrl, this.userService.getAuthorizationHeader())\r\n                .toPromise()\r\n                .then(response => {\r\n                    this.names = response.json() as Name[];\r\n                    return this.names;\r\n                })\r\n                .catch(this.handleError);\r\n        }\r\n        return this._namePromise;\r\n    }\r\n\r\n    /**\r\n     * A convenience method to search any array of items for any that are linked to a given game id\r\n     */\r\n    private _getItemsByGameID(items: any[], id: number): any[] {\r\n        let returnItems = [];\r\n        items.forEach(item => {\r\n            if (item.game && item.game == id) {\r\n                returnItems.push(item);\r\n            } else if (item.games && item.games.indexOf(id) > -1) {\r\n                returnItems.push(item);\r\n            }\r\n        });\r\n        return returnItems;\r\n    }\r\n\r\n    /**\r\n     * This method isn't necessary anymore because names are delivered with games now\r\n     */\r\n    // getNamesByGameID(id: number): Name[] {\r\n    //     let names: Name[] = this._getItemsByGameID(this.names, id);\r\n    //     names.sort((n1, n2) => {\r\n    //         let comp = n2.Weight - n1.Weight;\r\n    //         if (comp === 0) {\r\n    //             return n1.DateModified > n2.DateModified ? -1 : 1;\r\n    //         } else {\r\n    //             return comp;\r\n    //         }\r\n    //     });\r\n    //     return names;\r\n    // }\r\n\r\n    /**\r\n     * Creates a new name for the given gameID, making a post to /api/name\r\n     */\r\n    createName(gameID: string, name: string): Promise<Name> {\r\n        return this.http.post(this.namesUrl, {\r\n            game: gameID,\r\n            name: name\r\n        }, this.userService.getAuthorizationHeader())\r\n            .toPromise()\r\n            .then(response => {\r\n                let name = response.json() as Name;\r\n                this.names.push(name);\r\n                return name;\r\n            })\r\n            .catch(this.handleError);\r\n    }\r\n\r\n    /**\r\n     * Updates a name on the server, making a PUT call to /api/name/:_id\r\n     */\r\n    saveName(name: Name): Promise<Name> {\r\n        return this.http.put(this.namesUrl + '/' + name._id,\r\n            name, this.userService.getAuthorizationHeader())\r\n            .toPromise()\r\n            .then(response => {\r\n                let newName = response.json() as Name;\r\n                let index = this.names.indexOf(name);\r\n                if (index > -1) {\r\n                    this.names.splice(index, 1, newName);\r\n                } else {\r\n                    this.names.push(newName);\r\n                }\r\n                this._sortGames();\r\n                return newName; \r\n            })\r\n    }\r\n\r\n    /**\r\n     * With the magic of Mongo, we don't need to fetch these anymore!\r\n     */\r\n    // private _tagGamePromise: Promise<TagGame[]>;\r\n    // private getTagGames(): Promise<TagGame[]> {\r\n    //     if (!this._tagGamePromise) {\r\n    //         this._tagGamePromise = this.http.get(this.tagGameUrl, this.userService.getAuthorizationHeader())\r\n    //             .toPromise()\r\n    //             .then(response => {\r\n    //                 this.tagGames = response.json() as TagGame[];\r\n    //                 return this.tagGames;\r\n    //             })\r\n    //             .catch(this.handleError);\r\n    //     }\r\n    //     return this._tagGamePromise;\r\n    // }\r\n\r\n    // getTagGamesByGameID(id: number): TagGame[] {\r\n    //     let tagGames: TagGame[] = this._getItemsByGameID(this.tagGames, id);\r\n    //     return tagGames;\r\n    // }\r\n\r\n    private _playerCountPromise: Promise<GameMetadata[]>;\r\n    getPlayerCounts(): Promise<GameMetadata[]> {\r\n        if (!this._playerCountPromise) {\r\n            this._playerCountPromise = this.http.get(this.playerCountUrl, this.userService.getAuthorizationHeader())\r\n                .toPromise()\r\n                .then(response => {\r\n                    this.playercounts = response.json() as GameMetadata[];\r\n                    return this.playercounts;\r\n                })\r\n                .catch(this.handleError);\r\n        }\r\n        return this._playerCountPromise;\r\n    }\r\n\r\n    getPlayerCountById(id: String): Promise<GameMetadata> {\r\n        return new Promise<GameMetadata>((resolve, reject) => {\r\n            this.getPlayerCounts().then((playercounts) => {\r\n                playercounts.forEach((playercount) => {\r\n                    if (playercount._id == id) {\r\n                        resolve(playercount);\r\n                    }\r\n                });\r\n            })\r\n        });\r\n    }\r\n\r\n    createPlayerCount(name: string, min: number, max: number, description: string): Promise<GameMetadata> {\r\n        return this.http.post(this.metadataUrl,\r\n            {\r\n                name: name,\r\n                min: min,\r\n                max: max,\r\n                type: 'playerCount',\r\n                description: description\r\n            }, this.userService.getAuthorizationHeader())\r\n            .toPromise()\r\n            .then((response) => {\r\n                let playercount = response.json() as GameMetadata;\r\n                this.playercounts.push(playercount);\r\n                return playercount;\r\n            });\r\n    }\r\n\r\n    private _durationPromise: Promise<GameMetadata[]>;\r\n    getDurations(): Promise<GameMetadata[]> {\r\n        if (!this._durationPromise) {\r\n            this._durationPromise = this.http.get(this.durationUrl, this.userService.getAuthorizationHeader())\r\n                .toPromise()\r\n                .then(response => {\r\n                    this.durations = response.json() as GameMetadata[];\r\n                    return this.durations;\r\n                })\r\n                .catch(this.handleError);\r\n        }\r\n        return this._durationPromise;\r\n    }\r\n\r\n    getDurationById(id: String): Promise<GameMetadata> {\r\n        return new Promise<GameMetadata>((resolve, reject) => {\r\n            this.getDurations().then((durations) => {\r\n                durations.forEach((duration) => {\r\n                    if (duration._id == id) {\r\n                        resolve(duration);\r\n                    }\r\n                });\r\n            })\r\n        });\r\n    }\r\n\r\n    createDuration(name: string, min: number, max: number, description: string): Promise<GameMetadata> {\r\n        return this.http.post(this.metadataUrl,\r\n            {\r\n                Name: name,\r\n                Min: min,\r\n                Max: max,\r\n                type: 'duration',\r\n                Description: description\r\n            }, this.userService.getAuthorizationHeader())\r\n            .toPromise()\r\n            .then((response) => {\r\n                let duration = response.json() as GameMetadata;\r\n                this.durations.push(duration);\r\n                return duration;\r\n            });\r\n    }\r\n\r\n    private _tagPromise: Promise<Tag[]>;\r\n    getTags(): Promise<Tag[]> {\r\n        if (!this._tagPromise) {\r\n            if (this.userService.can('tag_view')) {\r\n                this._tagPromise = this.http.get(this.tagUrl, this.userService.getAuthorizationHeader())\r\n                    .toPromise()\r\n                    .then(response => {\r\n                        this.tags = response.json() as Tag[];\r\n                        return this.tags;\r\n                    })\r\n                    .catch(this.handleError);\r\n            } else {\r\n                this._tagPromise = new Promise<Tag[]>((resolve, reject) => {\r\n                    resolve([]);\r\n                });\r\n            }\r\n        }\r\n        return this._tagPromise;\r\n    }\r\n\r\n    getTagById(id: String): Promise<Tag> {\r\n        return new Promise<Tag>((resolve, reject) => {\r\n            this.getTags().then((tags) => {\r\n                tags.forEach((tag) => {\r\n                    if (tag._id == id) {\r\n                        resolve(tag);\r\n                    }\r\n                });\r\n            });\r\n        });\r\n    }\r\n\r\n    gameHasTag(game: Game, tagIDs: String[]): boolean {\r\n        let foundTagGame: boolean = false;\r\n        game.tags.forEach((taggame) => {\r\n            if (tagIDs.includes(taggame.tag._id)) {\r\n                foundTagGame = true;\r\n                return false;\r\n            }\r\n        });\r\n        return foundTagGame;\r\n    }\r\n\r\n    private _notePromise: Promise<Note[]>;\r\n    getNotes(): Promise<Note[]> {\r\n        if (!this._notePromise) {\r\n            if (this.userService.can('note_public_view')) {\r\n                this._notePromise = this.http.get(this.noteUrl, this.userService.getAuthorizationHeader())\r\n                    .toPromise()\r\n                    .then(response => {\r\n                        this.notes = response.json() as Note[];\r\n                        return this.notes;\r\n                    })\r\n                    .catch(this.handleError);\r\n            } else {\r\n                this._notePromise = new Promise<Note[]>((resolve, reject) => {\r\n                    resolve([]);\r\n                })\r\n            }\r\n        }\r\n        return this._notePromise;\r\n    }\r\n\r\n    getNotesForGame(game: Game): Promise<Note[]> {\r\n        return new Promise<Note[]>((resolve, reject) => {\r\n            this.getNotes().then((notes) => {\r\n                // TODO: make this logic server-side\r\n                let notesForGame: Note[] = [];\r\n                notes.forEach((note) => {\r\n                    if (\r\n                        note.game == game._id\r\n                        || (game.playerCount._id && note.metadata && \r\n                            note.metadata._id == game.playerCount._id)\r\n                        || (game.duration._id && note.metadata &&\r\n                            note.metadata._id == game.duration._id)\r\n                        || (note.tag && this.gameHasTag(game, [note.tag._id]))\r\n                    ) {\r\n                        notesForGame.push(note);\r\n                    }\r\n                });\r\n                resolve(notesForGame);\r\n            });\r\n        });\r\n    }\r\n\r\n    deleteGame(game: Game): Promise<boolean> {\r\n        return this.http.delete(this.gamesUrl + '/' + game._id,\r\n            this.userService.getAuthorizationHeader())\r\n            .toPromise()\r\n            .then((response) => {\r\n                this._removeGameFromArray(game);\r\n                return true;\r\n            })\r\n    }\r\n\r\n    private _removeGameFromArray(game: Game): number {\r\n        let index = this.games.indexOf(game);\r\n        if (index > -1) {\r\n            this.games.splice(index, 1);\r\n        }\r\n        return index;\r\n    }\r\n\r\n    private _handleNewGame(game: Game, response): Game {\r\n        let index = this._removeGameFromArray(game);\r\n        let newGame = response.json() as Game;\r\n        if (index > -1) {\r\n            this.games.splice(index, 0, newGame);\r\n        } else {\r\n            this.games.push(newGame);\r\n        }\r\n        return newGame;\r\n    }\r\n\r\n    saveGame(game: Game): Promise<Game> {\r\n        return this.http.put(this.gamesUrl + '/' + game._id,\r\n            game,\r\n            this.userService.getAuthorizationHeader())\r\n            .toPromise()\r\n            .then((response) => {\r\n                return this._handleNewGame(game, response);\r\n            })\r\n            .catch(this.handleError);\r\n    }\r\n\r\n    createGame(): Promise<Game> {\r\n        return this.http.post(this.gamesUrl,\r\n            {}, this.userService.getAuthorizationHeader())\r\n            .toPromise()\r\n            .then((response) => {\r\n                let game = response.json() as Game;\r\n                this.games.push(game);\r\n                this._sortGames();\r\n                return game;\r\n            })\r\n            .catch(this.handleError);\r\n    }\r\n\r\n    private _handleNewTagGame(game: Game, response, tag: Tag|string): TagGame {\r\n        let newGame = this._handleNewGame(game, response),\r\n            taggame: TagGame;\r\n\r\n        newGame.tags.forEach(tg => {\r\n            if ((typeof(tag) == 'object' && tg.tag._id == tag._id) ||\r\n                (typeof(tag) == 'string' && tg.tag.name == tag)) {\r\n                taggame = tg;\r\n                return false;\r\n            }\r\n        });\r\n\r\n        return taggame;\r\n    }\r\n\r\n    saveTagToGame(game: Game, tag: Tag): Promise<TagGame> {\r\n        return this.http.post(this.gamesUrl + '/' + game._id + '/addTag/' + tag._id, {},\r\n            this.userService.getAuthorizationHeader())\r\n            .toPromise()\r\n            .then(response => {\r\n                return this._handleNewTagGame(game, response, tag);\r\n            })\r\n    }\r\n\r\n    deleteTagGame(game: Game, taggame: TagGame): Promise<Game> {\r\n        return this.http.delete(this.gamesUrl + '/' + game._id + '/removeTag/' + taggame.tag._id,\r\n            this.userService.getAuthorizationHeader())\r\n            .toPromise()\r\n            .then(response => {\r\n                return this._handleNewGame(game, response);\r\n            })\r\n    }\r\n\r\n    createTag(name: string, game: Game): Promise<TagGame> {\r\n        return this.http.post(this.gamesUrl + '/' + game._id + '/createTag/' + name, \r\n            { name: name },\r\n            this.userService.getAuthorizationHeader())\r\n            .toPromise()\r\n            .then(response => {\r\n                return this._handleNewTagGame(game, response, name);\r\n            });\r\n    }\r\n\r\n    private handleError(error: any): Promise<any> {\r\n        console.error('An error has occurred', error);\r\n        \r\n        return Promise.reject(error.message || error);\r\n    }\r\n\r\n    // TODO: search stuff can be in a separate service\r\n\r\n    private _searchArray(arr: any[], type: string, idProperty: string, term: string): SearchResult[] {\r\n        let results: SearchResult[] = [];\r\n        arr.forEach((item) => {\r\n            let str = item.Name;\r\n\r\n            if (str.toLowerCase().indexOf(term) > -1) {\r\n                var regex = new RegExp('(' + term + ')', 'gi');\r\n                str = str.replace(regex, '<strong>$1</strong>');\r\n\r\n                let result: SearchResult = {\r\n                    text: str,\r\n                    id: item[idProperty],\r\n                    type: type\r\n                }\r\n                results.push(result);\r\n            }\r\n        });\r\n        return results;\r\n    }\r\n    private _sortSearchResults(results: SearchResult[]): SearchResult[] {\r\n        results.sort((r1, r2) => {\r\n            let val1 = r1.text;\r\n            let val2 = r2.text;\r\n            if (val1 > val2) {\r\n                return 1;\r\n            }\r\n            if (val1 < val2) {\r\n                return -1;\r\n            }\r\n            return 0;\r\n        });\r\n        return results;\r\n    }\r\n\r\n    searchForResults(term: string): Promise<SearchResult[]> {\r\n        return new Promise<SearchResult[]>((resolve, reject) => {\r\n            term = term.toLowerCase();\r\n            let searchResults: SearchResult[] = [];\r\n            if (term) {\r\n                Promise.all([\r\n                    this.getNames(),\r\n                    this.getTags(),\r\n                    this.getDurations(),\r\n                    this.getPlayerCounts()\r\n                ])\r\n                    .then((items) => {\r\n                        searchResults = []\r\n                            .concat(this._searchArray(items[0], 'name', 'game', term))\r\n                            .concat(this._searchArray(items[1], 'tag', '_id', term))\r\n                            .concat(this._searchArray(items[2], 'duration', '_id', term))\r\n                            .concat(this._searchArray(items[3], 'playercount', '_id', term));\r\n\r\n                        // TODO: include player count and durations by actual values if the term is a number?\r\n\r\n                        searchResults = this._sortSearchResults(searchResults);\r\n\r\n                        resolve(searchResults);\r\n                    });\r\n            }\r\n        });\r\n    }\r\n\r\n    searchForTags(term: string): Promise<Tag[]> {\r\n        return new Promise<Tag[]>((resolve, reject) => {\r\n            term = term.toLocaleLowerCase();\r\n            let matchingTags: Tag[] = [];\r\n            if (term) {\r\n                this.getTags().then(tags => {\r\n                    tags.forEach(tag => {\r\n                        if (tag.name.toLocaleLowerCase().indexOf(term) > -1) {\r\n                            matchingTags.push(tag);\r\n                        }\r\n                    });\r\n                    resolve(matchingTags);\r\n                });\r\n            }\r\n        })\r\n    }\r\n\r\n    searchForGames(term: string): Promise<Game[]> {\r\n        return new Promise<Game[]>((resolve, reject) => {\r\n            term = term.toLowerCase();\r\n            let gameResults: Game[] = [];\r\n            if (term) {\r\n                Promise.all([\r\n                    this.getGames(),\r\n                    this.getTags(),\r\n                    this.getDurations(),\r\n                    this.getPlayerCounts()\r\n                ])\r\n                    .then((items) => {\r\n                        \r\n                        // search the tags\r\n                        let tagResults: String[] = [];\r\n                        items[1].forEach((tag) => {\r\n                            if (tag.name.toLowerCase().indexOf(term) > -1) {\r\n                                tagResults.push(tag._id);\r\n                            }\r\n                        });\r\n\r\n                        // search the durations\r\n                        let durationResults: String[] = [];\r\n                        items[2].forEach((duration) => {\r\n                            if (duration.name.toLowerCase().indexOf(term) > -1) {\r\n                                durationResults.push(duration._id);\r\n                            }\r\n                        });\r\n\r\n                        // search the player counts\r\n                        let playerCountResults: String[] = [];\r\n                        items[3].forEach((playercount) => {\r\n                            if (playercount.name.toLowerCase().indexOf(term) > -1) {\r\n                                playerCountResults.push(playercount._id);\r\n                            }\r\n                        });\r\n\r\n                        // loop through the games\r\n                        items[0].forEach((game) => {\r\n                            // add it if a tag matches or if the playercount or duration matches\r\n                            if (this.gameHasTag(game, tagResults) ||\r\n                                    durationResults.includes(game.duration._id) ||\r\n                                    playerCountResults.includes(game.playerCount._id) ) {\r\n                                gameResults.push(game);\r\n                            } else {\r\n                                // add it if a name matches\r\n                                game.names.forEach((name) => {\r\n                                    if (name.name.toLowerCase().indexOf(term) > -1 &&\r\n                                            gameResults.indexOf(game) == -1) {\r\n                                        gameResults.push(game);\r\n                                    }\r\n                                });\r\n                            }\r\n                        });\r\n\r\n                        resolve(gameResults);\r\n                    });\r\n            }\r\n        });\r\n    }\r\n}\r\n"]}